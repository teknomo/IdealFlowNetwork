Search.setIndex({"docnames": ["BeginnerGuide", "DevGuide_IFN_AI", "IFN4OtherFields", "IFNspirituality", "IFNtutorial", "IdealFlow", "MarkovOrder", "adjList", "cycle_analysis", "data_management", "data_science_ai", "data_structure", "entropy", "flow_management", "ifn", "index", "link_management", "markov", "matrix", "modules", "neighborhood", "network_indices", "network_operation", "node_management", "overview", "path", "query_methods", "random_walk", "signature_analysis", "static_methods", "stochastic", "transportation_analysis", "tutorial", "tutorial_NLP", "tutorial_data_table", "unit_tests", "utility"], "filenames": ["BeginnerGuide.ipynb", "DevGuide_IFN_AI.ipynb", "IFN4OtherFields.ipynb", "IFNspirituality.ipynb", "IFNtutorial.ipynb", "IdealFlow.rst", "MarkovOrder.ipynb", "adjList.rst", "cycle_analysis.rst", "data_management.rst", "data_science_ai.rst", "data_structure.rst", "entropy.rst", "flow_management.rst", "ifn.rst", "index.rst", "link_management.rst", "markov.rst", "matrix.rst", "modules.rst", "neighborhood.rst", "network_indices.rst", "network_operation.rst", "node_management.rst", "overview.rst", "path.rst", "query_methods.rst", "random_walk.rst", "signature_analysis.rst", "static_methods.ipynb", "stochastic.rst", "transportation_analysis.rst", "tutorial.ipynb", "tutorial_NLP.ipynb", "tutorial_data_table.ipynb", "unit_tests.rst", "utility.rst"], "titles": ["Ideal Flow Network (IFN) - Beginner\u2019s Guide", "IFN for Data Science, Machine Learning and Artificial Intelligence", "How to Apply IFN in Your Field of Study?", "IFN Spirituality, System Thinking and Morality", "IFN Tutorial", "Ideal Flow Package", "Tutorial on Markov Order", "Adjacency List Operations", "Cycle Analysis", "Data Management Methods", "Data Science, Machine Learning and Artificial Intelligence", "Data Structure", "Entropy", "Flow Management", "Ideal Flow Network", "Welcome to Ideal Flow Network (IFN)\u2019s documentation!", "Link Management", "Markov Chain Analysis", "Matrix Operations", "IdealFlow", "Neighborhood", "Network Indices", "Network Operations", "Node Management", "Overview", "Path and Trajectory Analysis", "Query and Search Methods", "Random Walk and Random Cycle", "Signature Analysis", "Methods in IFN", "Stochastic and Probability", "Transportation Analysis", "IFN Tutorial for General Network", "IFN Tutorial for Natural Language Processing", "IFN for Classification of Data Table (Supervised Learning)", "Unit Tests", "Utilities and Helper Methods"], "terms": {"kardi": [0, 1, 2, 3, 4, 5, 6, 32, 33, 34], "teknomo": [0, 1, 2, 3, 4, 5, 6, 32, 33], "you": [0, 2, 3, 4, 5, 32, 34, 35], "need": [0, 2, 4, 5, 32, 34], "have": [0, 2, 3, 4, 5, 11, 32, 33, 34], "python": [0, 4, 11, 32, 34], "go": [0, 2, 3, 32, 34], "pypi": [0, 32], "org": [0, 32], "find": [0, 2, 4, 5, 15, 24], "idealflownetwork": [0, 32], "version": [0, 5, 15, 19, 32], "1": [0, 4, 5, 6, 15, 32, 33, 34], "5": [0, 4, 5, 6, 11, 24, 32, 33, 34], "latest": [0, 32], "pip": [0, 5, 32], "altern": [0, 2, 32], "download": [0, 32], "zip": [0, 32], "file": [0, 5, 32, 34], "from": [0, 2, 5, 15, 24, 32, 33, 34, 35], "github": [0, 32], "unzip": [0, 32], "folder": [0, 32, 34, 35], "pkg": [0, 32], "cd": [0, 32], "your_folder_nam": [0, 32], "In": [0, 1, 2, 3, 4, 5, 32, 33, 34], "command": [0, 5, 32], "prompt": [0, 32], "It": [0, 2, 3, 4, 5, 24, 32, 33, 34], "copi": [0, 5, 32], "packag": [0, 6, 15, 19, 32, 33, 34], "your": [0, 3, 15, 32, 34], "environ": [0, 32], "If": [0, 3, 4, 5, 32, 34], "comput": [0, 4, 5, 15, 32, 33], "doe": [0, 4, 5, 29, 32, 33], "check": [0, 4, 5, 32], "ensurepip": [0, 32], "document": [0, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 36], "thi": [0, 1, 2, 3, 4, 5, 24, 32, 34], "tutori": [0, 1, 15, 24, 34], "learn": [0, 3, 5, 15, 24], "modul": [0, 4, 6, 15, 19, 24, 32, 33, 34, 35], "defin": [0, 2, 4, 5, 32, 34], "analyz": [0, 2, 5, 24, 33], "gener": [0, 2, 4, 5, 6, 10, 15, 19, 25, 29, 33], "just": [0, 3, 4, 32, 34], "import": [0, 2, 3, 4, 5, 6, 24, 32, 33, 34, 35], "idealflow": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36], "net": [0, 4, 5, 6, 32], "alia": [0, 5, 6, 32, 33, 34], "The": [0, 2, 4, 5, 11, 15, 24, 32, 34], "contain": [0, 4, 5, 32, 34, 35], "class": [0, 5, 11, 15, 29, 32, 34, 35], "let": [0, 4, 32], "u": [0, 3, 4, 5, 32, 33], "call": [0, 4, 34], "displai": [0, 5, 32], "2": [0, 4, 5, 6, 15, 32, 33, 34, 35], "n": [0, 4, 5, 6, 11, 32, 33, 34], "print": [0, 4, 5, 6, 24, 32, 33, 34, 35], "set": [0, 4, 5, 15, 24, 35], "name": [0, 4, 5, 15, 32, 34], "can": [0, 3, 4, 5, 11, 15, 29, 32, 33, 34, 35], "its": [0, 2, 3, 5, 32], "formal": 0, "represent": [0, 2, 5, 11, 32], "3": [0, 4, 5, 6, 11, 32, 33, 34], "my": 0, "first": [0, 2, 4, 5, 11, 32, 33, 34], "howev": [0, 2, 3, 4], "would": [0, 3, 4, 11, 32, 34], "produc": [0, 5, 29, 32, 34], "adjac": [0, 4, 5, 11, 15, 24, 32], "list": [0, 4, 5, 11, 15, 24, 32], "sinc": [0, 4, 34], "we": [0, 1, 2, 3, 4, 5, 11, 32, 34], "did": 0, "yet": [0, 4], "ani": [0, 3, 4, 5, 32], "link": [0, 2, 3, 5, 11, 15, 24, 32], "node": [0, 2, 3, 4, 5, 6, 11, 15, 19, 24, 32, 34], "i": [0, 3, 4, 5, 11, 15, 24, 32, 33, 34], "an": [0, 1, 2, 3, 4, 5, 24, 32, 33, 34], "empti": [0, 5, 32], "4": [0, 4, 5, 6, 32, 33, 34], "ad": [0, 4, 5, 32], "when": [0, 2, 3, 4, 5, 32], "add": [0, 4, 5, 24, 32, 33], "automat": [0, 2, 32, 35], "specifi": [0, 5, 32, 34], "start_nod": [0, 5], "end_nod": 0, "option": [0, 5, 32, 34], "weight": [0, 2, 4, 5, 11, 32], "which": [0, 2, 3, 4, 5, 11, 24, 32], "cale": 0, "do": [0, 3, 4, 32], "default": [0, 5, 32], "equal": [0, 4, 5, 32, 34], "one": [0, 2, 3, 4, 5, 32, 34], "exist": [0, 2, 4, 5, 32], "add_link": [0, 4, 5, 15, 16, 19, 24, 32], "creat": [0, 2, 3, 4, 5, 6, 24, 32], "alreadi": [0, 4, 5, 32], "onli": [0, 2, 3, 5, 34], "updat": [0, 4, 5, 32, 33], "give": [0, 3, 34], "string": [0, 2, 4, 5, 11, 32, 34], "show": [0, 2, 3, 4, 5, 6, 15, 19, 22, 32, 33, 34, 36], "visual": [0, 5], "figur": 0, "total": [0, 4, 5, 11, 32], "kappa": [0, 4, 5, 11, 13, 14, 15, 18, 19, 21, 31, 32], "totl": 0, "after": [0, 5, 32], "exampl": [0, 2, 3, 4, 11, 15, 33, 34, 35], "below": [0, 2, 5, 32, 34], "b": [0, 4, 5, 6, 11, 24, 32, 33], "sink": [0, 4, 5, 32], "therefor": [0, 32], "ha": [0, 4, 5, 32], "39": [0, 4, 5, 6, 32, 33, 34], "don": [0, 3, 5], "t": [0, 2, 3, 5, 32, 33], "method": [0, 4, 5, 15, 24, 32, 33, 34], "add_nod": [0, 5, 15, 19, 23, 32], "node_id": [0, 5], "new": [0, 2, 3, 4, 5, 6, 11, 24, 32, 33, 34], "isol": [0, 3, 5, 32], "6": [0, 4, 5, 32, 34], "c": [0, 4, 5, 6, 11, 24, 32, 33, 34], "d": [0, 4, 5, 6, 11, 32, 33], "delet": [0, 5, 32], "properti": [0, 3, 4, 5, 15, 24], "return": [0, 3, 32], "7": [0, 4, 5, 6, 32, 34], "delete_nod": [0, 5, 15, 19, 23, 32], "now": [0, 4, 32, 34, 35], "ac": [0, 5], "8": [0, 4, 5, 32, 34], "observ": [0, 4], "9": [0, 4, 5, 6, 32, 34], "len": [0, 5], "netwok": [0, 32], "number": [0, 2, 4, 5, 6, 32, 34], "10": [0, 4, 5, 32, 34], "view": [0, 3], "get": [0, 4, 5, 32, 33, 34], "item": [0, 5, 34], "11": [0, 4, 32, 34], "also": [0, 3, 4, 5, 32, 34], "directli": [0, 2, 4, 5, 32], "replac": [0, 4, 5, 32], "valu": [0, 2, 4, 5, 11, 15, 32, 34], "12": [0, 4, 32, 34], "kei": [0, 5, 11, 15], "form": [0, 3, 4, 5], "iter": 0, "loop": [0, 3, 5, 32], "13": [0, 4, 5, 6, 33, 34], "each": [0, 2, 3, 4, 5, 11, 32, 34], "shown": [0, 4, 32, 34], "dictionari": [0, 5, 11, 32], "node_flow": 0, "14": [0, 4, 32, 33, 34], "nodes_flow": [0, 5, 15, 19, 23, 32], "0": [0, 4, 5, 6, 11, 32, 33, 34], "matrix": [0, 2, 5, 15, 24, 32], "where": [0, 2, 3, 5, 32, 34], "ar": [0, 2, 3, 4, 5, 29, 32, 34, 35], "base": [0, 2, 3, 4, 5, 11, 32, 34], "chang": [0, 2, 5, 34], "entir": [0, 5], "insid": [0, 34], "set_data": [0, 5, 9, 15, 19, 24, 32], "adjlist": [0, 5, 32], "get_data": [0, 5, 9, 15, 19, 32], "intern": [0, 5, 29, 32], "15": [0, 4, 5, 32, 33, 34], "zero": [0, 4, 5, 32], "abov": [0, 2, 24, 32, 34], "ab": [0, 5], "reduc": [0, 2, 5, 32], "16": [0, 4, 6, 32, 33, 34], "reduce_link_flow": [0, 5, 13, 15, 16, 19], "non": [0, 5, 34], "warn": 0, "17": [0, 4, 5, 32, 33, 34], "delete_link": [0, 5, 15, 16, 19, 32], "attempt": 0, "cb": [0, 5], "start": [0, 2, 3, 4, 5, 11, 32, 33], "end": [0, 3, 4, 5, 11, 32], "unlik": [0, 2], "graph": [0, 5, 15, 32], "theori": [0, 4, 11], "relat": [0, 2], "18": [0, 4, 33], "neg": [0, 2, 3, 5], "cannot": [0, 5, 32], "becaus": [0, 2, 3, 4, 5, 32], "remov": [0, 5, 32, 33], "19": [0, 4, 32], "repres": [0, 2, 3, 4, 5, 11, 24, 34], "get_matrix": [0, 4, 5, 9, 15, 18, 19, 22, 32], "capac": [0, 2, 4, 5, 11, 32], "20": [0, 4, 34], "listnod": [0, 4, 5, 32], "nlist": 0, "set_matrix": [0, 4, 5, 6, 9, 15, 18, 19, 22, 32], "list_nod": [0, 4, 5, 32], "21": [0, 4, 5, 6], "what": [0, 3, 33, 34], "happen": [0, 3, 4], "associ": [0, 5], "connect": [0, 2, 3, 4, 5, 24, 32], "behavior": [0, 5, 34], "expect": 0, "exactli": [0, 4], "like": [0, 2, 3, 5, 32, 33], "22": [0, 4, 5, 32], "fun": [0, 2], "begin": [0, 2, 3, 32], "type": [0, 2, 4, 5, 32, 33, 34], "dynam": 0, "contract": [0, 5], "assign": [0, 5, 10, 15, 19, 25, 34], "trajectori": [0, 2, 5, 6, 11, 15, 32, 34], "path": [0, 2, 3, 4, 5, 11, 15, 24, 34, 35], "sequenc": [0, 2, 4, 5, 11, 32], "through": [0, 2, 5, 15, 24], "unlearn": [0, 5, 10, 15, 19, 32], "By": [0, 2, 3, 4, 32], "unit": [0, 5, 15], "paramet": [0, 29, 34], "along": [0, 5, 32], "23": [0, 4, 32], "e": [0, 2, 4, 5, 6, 11, 32, 33, 34], "more": [0, 2, 3, 4, 5, 15, 24, 34], "set_path": [0, 4, 5, 15, 19, 25, 32], "delta_flow": [0, 5], "necessarili": [0, 5, 32], "24": [0, 4], "startnod": [0, 5, 32], "is_cycl": [0, 5], "true": [0, 2, 3, 4, 5, 32, 33, 34], "random": [0, 4, 5, 6, 15, 24, 32], "cycl": [0, 2, 3, 5, 11, 15, 24, 32], "otherwis": [0, 5, 32], "walk": [0, 2, 5, 15, 24], "length": [0, 5, 33], "between": [0, 2, 3, 4, 5, 24, 33], "possibl": [0, 2, 5, 15, 34], "might": [0, 2, 3], "25": [0, 4, 5, 32], "fals": [0, 3, 4, 5, 32], "get_path": [0, 5, 15, 19], "endnod": [0, 5, 32], "shortest": [0, 5, 15], "search": [0, 5, 15], "depth": [0, 5], "df": [0, 5, 15, 19, 26], "26": [0, 4, 5], "27": [0, 4, 5], "all": [0, 3, 4, 5, 11, 15, 35], "find_all_path": [0, 5, 15, 19, 25, 32], "28": [0, 4], "shortest_path": [0, 5, 15, 19, 25, 32], "29": [0, 4], "all_shortest_path": [0, 5, 15, 19, 25, 32], "floyd": [0, 5], "warshal": [0, 5], "algorithm": [0, 2, 5, 34], "sum": [0, 4, 5, 11, 32], "pair": [0, 5], "row": [0, 4, 5, 11, 32, 34], "column": [0, 4, 5, 11, 32, 34], "inf": [0, 5, 32], "30": [0, 4, 34], "want": [0, 2, 4, 5, 32, 34], "whether": [0, 2, 3, 4, 5, 32], "certain": [0, 2, 3, 4], "valid": [0, 5], "is_path": [0, 5, 15, 19, 25, 32], "A": [0, 2, 3, 4, 5, 11, 32], "thu": [0, 4, 34], "least": [0, 3, 5], "two": [0, 2, 3, 4, 5, 11], "31": [0, 4, 5], "onc": [0, 2, 3, 5, 32, 34], "see": [0, 2, 3, 4, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 36], "mani": [0, 2, 4, 32], "follow": [0, 2, 4, 5, 11, 24, 32, 34], "total_nod": [0, 5, 15, 19, 23, 32], "total_link": [0, 5, 15, 16, 19, 32], "total_flow": [0, 4, 5, 13, 15, 19, 21, 32], "network_entropi": [0, 5, 12, 15, 19, 21, 32], "average_node_entropi": [0, 5, 12, 14, 15, 19], "diamet": [0, 5, 15, 19, 21], "densiti": [0, 5, 15, 19, 21], "min_flow": [0, 5, 13, 15, 18, 19], "max_flow": [0, 5, 13, 15, 18, 19, 21, 32], "avg_flow": [0, 18], "stdev_flow": [0, 5, 13, 15, 19, 21], "cov_flow": [0, 4, 5, 13, 14, 15, 19, 21, 32], "32": [0, 4, 6, 35], "direct": [0, 4, 5, 15, 32], "layout": [0, 5, 32, 34], "circular": [0, 4, 5, 32, 34], "33": [0, 4], "entropi": [0, 4, 5, 15, 24, 32], "ratio": [0, 4, 5], "network_entropy_ratio": [0, 5, 12, 15, 19], "averag": [0, 4, 5, 33], "average_node_entropy_ratio": [0, 5, 12, 15, 19], "min": [0, 4, 5, 32], "max": [0, 4, 5, 32], "average_flow": [0, 5, 13, 15, 19], "standard": [0, 4, 5, 15, 34], "deviat": [0, 4, 5], "coeffici": [0, 5], "variat": [0, 4, 5, 32], "3296613488547582": 0, "969570350190125": 0, "541117452339652": 0, "951668662572215": 0, "4285714285714286": 0, "1870439059165649": 0, "13093073414159542": 0, "is_connect": [0, 4, 5, 15, 19, 22, 32], "undirect": [0, 4, 32], "is_strongly_connect": [0, 4, 5, 14, 15, 19, 22, 32], "is_premag": [0, 4, 5, 14, 15, 19, 32], "inflow": [0, 4, 5, 32], "outflow": [0, 4, 5, 32], "everi": [0, 3], "is_ideal_flow": [0, 4, 5, 14, 15, 19, 22, 32], "strongli": [0, 3, 4, 5, 32], "premag": [0, 3, 4, 5, 32], "is_acycl": [0, 5, 8, 15, 19, 22], "is_contain_cycl": [0, 5, 8, 15, 19, 25], "is_eulerian_cycl": [0, 5, 8, 15, 19, 22], "degre": [0, 5], "out": [0, 2, 3, 5], "is_bipartit": [0, 5, 15, 19, 22], "partit": 0, "subset": 0, "34": [0, 4, 33, 34], "our": [0, 2, 4, 11, 15], "even": [0, 2, 3], "some": [0, 2, 3, 4, 32], "imbal": 0, "balanc": [0, 2, 3, 4, 5, 32], "while": 0, "keep": 0, "three": [0, 5], "step": [0, 2, 5, 32, 34], "convert": [0, 5, 11, 32], "mathbf": 0, "stochast": [0, 2, 4, 5, 11, 15, 24, 32], "stationari": [0, 5], "distribut": [0, 4, 5], "pi": [0, 5, 11, 32], "via": [0, 2, 5, 32], "markov": [0, 2, 5, 14, 15, 19, 24, 30, 32], "chain": [0, 2, 5, 15, 24], "preserv": 0, "f": [0, 4, 5, 6, 11, 32, 33], "35": [0, 4], "capacity_to_stochast": [0, 4, 5, 14, 15, 18, 19, 30, 32], "ideal_flow": [0, 5, 15, 17, 18, 19, 31, 32], "33333333": [0, 4, 32], "66666667": [0, 4], "0000000000000004": [0, 4], "0000000000000013": [0, 4], "9999999999999993": 0, "9999999999999987": 0, "9999999999999973": 0, "9999999999999991": 0, "again": [0, 4], "36": [0, 4, 5], "hope": [0, 3, 34], "enjoi": [0, 34], "develop": [1, 3], "appic": 1, "field": [1, 15], "classifi": [1, 15, 19], "tabl": [1, 19], "versatil": 2, "tool": [2, 3, 24], "differ": [2, 4, 5, 10, 15, 19, 22, 34], "area": 2, "text": [2, 15, 19, 33], "explor": [2, 5], "clear": 2, "help": [2, 3, 5], "potenti": [2, 5], "To": [2, 3, 4, 5, 15, 32, 34, 35], "know": [2, 4, 32, 34], "extract": [2, 5, 34], "data": [2, 5, 15, 24, 29, 32, 33], "model": [2, 3, 5, 33, 34], "predict": [2, 3, 5, 15, 19, 33], "optim": 2, "control": [2, 5, 15, 19], "input": [2, 5, 29, 33, 34], "That": 2, "": [2, 3, 4, 5, 11, 24, 32, 33], "deriv": [2, 3, 5], "stori": 2, "state": [2, 4, 5, 11, 32], "reli": 2, "organ": 2, "essenti": [2, 3], "build": [2, 5], "wai": [2, 3, 4, 5, 32], "repeat": [2, 3, 5, 32], "scenario": 2, "construct": [2, 5], "signatur": [2, 5, 15, 24], "fine": 2, "tune": 2, "achiev": 2, "known": 2, "steadi": [2, 4, 5, 11, 32], "built": [2, 3], "outcom": [2, 3], "adjust": [2, 5], "constraint": [2, 5], "specif": [2, 5, 32], "perform": [2, 5, 24], "goal": [2, 3, 34], "befor": [2, 5, 32], "term": [2, 3, 4, 5], "context": [2, 3, 5, 24], "element": [2, 5], "within": [2, 3, 4, 5], "system": [2, 5, 15], "identifi": [2, 5, 33], "event": 2, "condit": 2, "g": [2, 5, 11, 32, 33, 34], "pixel": 2, "word": [2, 5, 33], "note": [2, 5], "symptom": 2, "intersect": [2, 5, 10, 15, 19, 22], "relationship": [2, 3], "transit": [2, 5], "neighbor": [2, 5, 24], "progress": 2, "movement": 2, "mai": [2, 3, 5], "indic": [2, 5, 24], "probabl": [2, 4, 5, 11, 15, 32], "inform": [2, 3, 24], "about": [2, 3], "lead": [2, 3], "anoth": [2, 5, 32], "result": [2, 5, 32, 33], "depend": [2, 5], "object": [2, 3, 5, 33], "re": [2, 5], "measur": [2, 5], "traffic": 2, "congest": [2, 5, 14, 15, 19, 31, 32], "improv": [2, 3], "accuraci": [2, 5, 33, 34], "best": 2, "desir": [2, 5], "discov": [2, 3, 5], "could": 2, "better": [2, 3], "rememb": 2, "matter": 2, "structur": [2, 5, 15, 24, 29], "crucial": 2, "effect": [2, 3, 5], "incorrect": 2, "poor": 2, "critic": [2, 3, 34], "poorli": 2, "ineffici": 2, "doesn": [2, 3, 5], "provid": [2, 5, 24], "accur": 2, "properli": 2, "correct": [2, 3, 4, 5], "being": [2, 5], "train": [2, 5, 15, 19, 33, 34], "eventu": [2, 3], "No": [2, 4], "sampl": [2, 5], "machin": [2, 5, 15, 24, 34], "requir": [2, 3, 5, 29], "both": [2, 3, 4, 5, 11, 32], "posit": [2, 3, 4, 5], "simplifi": [2, 32], "effici": [2, 4], "realli": 2, "separ": [2, 5], "categori": [2, 5, 15, 34], "basic": [2, 5, 11, 15, 24], "These": [2, 3, 4], "choic": [2, 3, 15], "situat": [2, 3], "encount": [2, 5], "chanc": [2, 5], "move": 2, "select": [2, 5, 32, 34], "particular": [2, 5, 33], "likelihood": 2, "occur": [2, 5], "imagin": [2, 3], "decid": 2, "stai": [2, 3], "home": 2, "feel": 2, "tire": 2, "work": [2, 3], "phrase": 2, "bigram": [2, 5, 33], "sentenc": [2, 5, 33], "love": 2, "program": [2, 5, 33], "them": [2, 3, 5], "pattern": [2, 5, 33, 34], "mimic": 2, "person": [2, 33, 34], "write": 2, "style": [2, 5, 32], "rgb": 2, "cmy": 2, "appear": 2, "next": [2, 3, 5, 32, 34], "scan": 2, "thei": [2, 3, 29], "overal": [2, 5], "similar": 2, "maintain": 2, "besid": 2, "togeth": [2, 3, 11], "consid": [2, 3, 5], "scene": 2, "recogn": [2, 5, 15, 19, 33], "head": 2, "usual": [2, 5], "bodi": 2, "realist": 2, "discret": 2, "over": [2, 3, 5], "stock": 2, "market": 2, "futur": [2, 3], "price": 2, "past": 2, "investor": 2, "chord": 2, "trigram": [2, 5], "genr": 2, "characterist": [2, 4], "fit": [2, 5, 15, 19, 33, 34], "allow": [2, 3, 5, 34], "creation": 2, "composit": 2, "ill": 2, "patient": 2, "diseas": 2, "doctor": 2, "treatment": 2, "guid": [2, 15, 24], "back": [2, 3, 4, 5, 6, 32, 34], "healthi": 2, "road": 2, "segment": 2, "vehicl": 2, "pass": 2, "citi": 2, "point": [2, 3, 4], "planner": 2, "signal": 2, "delai": 2, "count": [2, 5], "speed": 2, "travel": [2, 34], "minimum": [2, 4, 5, 32], "payoff": 2, "co": 2, "occurr": [2, 5], "bui": 2, "sell": 2, "profit": [2, 3], "health": [2, 3], "accid": 2, "factor": [2, 4, 5], "reduct": 2, "identif": 2, "scienc": [2, 15, 24, 33, 34], "think": [2, 15], "level": [2, 11], "rate": 2, "auxiliari": 2, "One": [2, 4], "leverag": 2, "logic": [2, 5, 15], "mathemat": [2, 3, 4, 5, 24], "complex": 2, "deep": [2, 5], "insight": [2, 3], "oper": [2, 3, 5, 15, 24], "applic": [2, 15], "until": [2, 3, 5], "reach": [2, 5], "here": [2, 3, 4, 24, 34], "For": [2, 3, 5, 24], "instanc": [2, 5, 24, 34], "song": 2, "offer": 2, "robust": 2, "framework": 2, "valuabl": [2, 3], "enhanc": 2, "creativ": 2, "numer": [2, 5], "truli": 2, "appreci": 2, "try": 2, "real": [2, 3], "world": [2, 3, 5], "own": [2, 34], "simpl": [2, 3, 5, 34], "flexibl": [2, 24], "ideal": [3, 4, 6, 19, 24, 34], "flow": [3, 4, 6, 11, 19, 24, 34], "network": [3, 4, 6, 7, 8, 9, 10, 12, 13, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 36], "artifici": [15, 24, 33, 34], "intellig": [15, 24, 33, 34], "how": [3, 4, 5, 15, 24, 34, 35], "imag": 15, "demonstr": [4, 24, 32, 34], "ai": 34, "label": [5, 34], "output": [5, 29, 32, 34], "unseen": 34, "load": [5, 15, 19, 34, 35, 36], "function": [11, 24, 29, 34], "def": 5, "loadfil": [], "filenam": 5, "open": 3, "r": [5, 33, 34], "encod": 5, "utf": [], "read": [5, 33, 34], "close": [5, 33], "table_data": 34, "birth": 34, "lai": 34, "egg": 34, "fly": 34, "live": [3, 34], "water": 34, "leg": 34, "ye": 34, "mammal": 34, "sometim": 34, "variabl": [5, 15, 19, 34], "variable_nam": 34, "x": [5, 33, 34], "featur": [4, 5, 32, 34], "includ": [4, 5, 24, 34], "y": [5, 33, 34], "classfii": [], "same": [3, 4, 5, 11, 32, 34], "done": 34, "preparedatat": [], "tableprocess": 5, "tblproc": [], "tp": [5, 33, 34], "ifnc": [5, 15, 19], "z": [5, 6, 34], "i2": [], "c9": [], "g4": [], "b2": [], "d0": [], "b9": [], "f7": [], "i1": [], "c5": [], "h5": [], "npredict": 34, "ntrue": 34, "6819721810585313": [], "6363114145052776": [], "6856279738081407": [], "5796475860536682": [], "invers": [5, 34], "tr": [33, 34], "nltk": [], "urllib": [], "request": [], "urllib2": [], "bs4": [], "beautifulsoup": [], "url": 33, "http": 5, "www": [], "gutenberg": [], "cach": [], "epub": [], "13166": [], "pg13166": [], "txt": 5, "psalm": [], "david": [], "page": 15, "urlopen": [], "decod": [], "utf8": [], "soup": [], "lxml": [], "mytext": [], "get_text": [5, 15, 19], "start_text": [], "THE": [], "end_text": [], "faith": [], "ador": [], "21677": [], "364228": [], "main": 15, "content": 19, "100": [4, 5, 32, 34, 35], "modulenotfounderror": [], "traceback": [], "most": [3, 4, 5], "recent": [], "last": [4, 5, 32, 34], "cell": 5, "line": 5, "gt": 32, "without": [3, 4, 5], "puctuat": [], "sent_token": [], "word_token": [], "punctuat": 5, "analysi": [5, 15, 24], "synthesi": [], "regexptoken": [], "w": [5, 33], "textprocess": 5, "preparetextinput": [5, 15, 19, 33], "save": [5, 11, 15, 19, 33, 36], "rang": [5, 6, 32, 33], "tokens2sent": [], "lut": [5, 33, 34], "long": [3, 5], "consequ": 3, "action": 3, "understand": [3, 5, 15], "make": [3, 4, 5, 15, 32], "decis": [3, 15], "align": 3, "everyon": 3, "who": 3, "promot": 3, "As": [3, 11, 32], "grow": 3, "share": [3, 5], "ve": 3, "other": [3, 4, 5], "believ": 3, "gift": 3, "god": 3, "human": [3, 33], "respons": 3, "continu": [3, 5], "us": [3, 4, 5, 11, 15, 24, 29, 33, 34, 35], "benefit": 3, "spread": 3, "awar": 3, "individu": 3, "growth": 3, "commun": 3, "power": [3, 15], "across": [3, 5, 15, 34], "time": [3, 4, 5, 15, 33], "space": [3, 4, 5], "becom": [3, 5, 32], "gain": 3, "thoughtfulli": 3, "fair": 3, "foundat": 3, "teach": 3, "justic": 3, "itself": [3, 4, 32], "thought": 3, "seri": [3, 15], "social": 3, "take": [3, 5], "ensur": [3, 5], "part": [3, 5, 34], "larger": [3, 5], "whole": 3, "transpar": 3, "dishonesti": 3, "everyth": 3, "interconnect": 3, "hand": 3, "todai": [3, 33], "circl": 3, "origin": [3, 4, 5, 32], "impact": 3, "ourselv": 3, "avoid": [3, 5], "ignor": [3, 4, 5], "incomplet": 3, "account": 3, "ethic": 3, "peopl": [3, 5], "natur": [3, 5, 15], "honest": 3, "treat": [3, 5], "justli": 3, "similarli": 3, "constantli": 3, "affect": 3, "come": 3, "idea": [3, 4], "noth": 3, "left": 3, "But": 3, "lie": 3, "break": [3, 34], "leav": 3, "li": 3, "won": 3, "catch": 3, "up": [3, 5, 24, 32, 34], "merg": [3, 4, 5], "cooper": 3, "stronger": 3, "join": [3, 34, 35], "forc": 3, "compani": 3, "dishonest": 3, "deceiv": 3, "pivot": [3, 4, 5], "common": [3, 5], "ground": 3, "synergi": 3, "combin": [3, 5, 15, 19, 34, 36], "effort": 3, "someth": 3, "bigger": 3, "romant": 3, "involv": [3, 34], "singl": [3, 5], "interpret": 3, "must": [3, 4, 5, 32, 34], "agre": 3, "thing": 3, "bring": 3, "influenc": 3, "act": 3, "dishonestli": 3, "perhap": 3, "mistrust": 3, "damag": 3, "never": 3, "alwai": [3, 4, 5, 11], "full": 3, "realiti": 3, "mislead": 3, "much": 3, "concept": [3, 15], "sai": 3, "miss": 3, "pictur": 3, "partial": 3, "made": 3, "kind": [3, 11], "often": 3, "overlook": 3, "realiz": 3, "those": [3, 5], "too": 3, "late": 3, "contrast": 3, "reflect": 3, "good": 3, "bad": 3, "choos": 3, "cut": 3, "corner": 3, "project": 3, "short": 3, "finish": 3, "quickli": 3, "error": [3, 4, 5], "fail": 3, "reput": 3, "suffer": 3, "complet": [3, 5], "deeper": 3, "busi": 3, "environment": 3, "cost": [3, 5], "degrad": 3, "resourc": [3, 4], "shortag": 3, "increas": 3, "regul": 3, "loss": 3, "consum": 3, "trust": 3, "fulli": [3, 5], "sustain": 3, "encourag": 3, "religi": 3, "understood": 3, "integ": [3, 4, 5, 11, 32], "explain": [3, 5], "introduc": 3, "ag": 3, "math": 3, "around": [3, 4], "children": 3, "caus": 3, "appli": [3, 4, 5, 15], "merit": 3, "novelti": [3, 4], "abil": 3, "reusabl": 4, "librari": 4, "quit": 4, "interest": 4, "refer": [4, 5, 24], "focu": 4, "se": 4, "numpi": [4, 5], "np": [4, 5], "edg": [4, 5, 11], "lane": 4, "mean": [4, 5, 32], "irreduc": [4, 5, 32], "test": [4, 5, 15, 33], "code": [4, 5, 15, 32, 34], "capacity_to_adjac": [4, 5, 15, 19, 32], "is_irreducible_matrix": [4, 5, 14, 15, 18, 19, 31, 32], "maximum": [4, 5], "uniformli": 4, "stochastic_to_network_entropi": [4, 5, 12, 15, 19, 30], "stochastic_to_entropy_ratio": [4, 5, 12, 15, 19, 30], "197224577336219": 4, "capacity_to_ideal_flow": [4, 5, 6, 14, 15, 18, 19, 31, 32], "03333333": 4, "16666667": [4, 32], "13333333": 4, "notic": 4, "sr": [4, 11, 32], "sum_of_row": [4, 5, 15, 18, 19, 30], "sc": [4, 11, 32], "sum_of_col": [4, 5, 15, 19, 30], "ispremag": 4, "is_premagic_matrix": [4, 5, 14, 15, 18, 19, 31, 32], "conserv": 4, "isirreduc": 4, "is_ideal_flow_matrix": [4, 5, 14, 15, 18, 19, 31, 32], "examin": 4, "asarrai": 4, "arrai": [4, 5, 6, 11, 32, 34], "put": [4, 5, 32], "num_nod": [4, 5, 6], "alphabet_list": [4, 5, 15, 19, 32, 36], "obtain": 4, "uniform": 4, "adjacency_to_ideal_flow": [4, 5, 14, 15, 18, 19, 31], "15384615": 4, "30769231": 4, "07692308": [4, 32], "23076923": [4, 32], "easili": [4, 5], "scale": [4, 5, 6, 32], "1000": [4, 5, 11], "153": [4, 32], "84615385": 4, "307": 4, "69230769": 4, "76": 4, "92307692": 4, "230": 4, "76923077": 4, "ideal_flow_to_stochast": [4, 5, 14, 15, 18, 19, 30, 31], "proof": 4, "theorem": 4, "found": [4, 5], "paper": 4, "east": 4, "journal": 4, "3862943611198906": 4, "expand": [4, 5, 15, 32], "tajectori": 4, "tr1": [4, 6], "pretend": 4, "arrow": 4, "moment": 4, "Then": [4, 32, 34], "tr2": 4, "still": 4, "weakli": [4, 32], "wen": 4, "cloud": [4, 5], "dummi": 4, "sourc": [4, 32], "inde": 4, "compon": [4, 5, 34], "bedc": 4, "tr3": 4, "trial": 4, "actual": 4, "simpli": 4, "branch": 4, "ca": [4, 5], "abc": [4, 5], "remain": [4, 5], "dac": 4, "section": [4, 24], "order": [4, 5, 15, 24, 32, 33], "assum": [4, 5, 32], "numnod": [4, 5, 32], "numlink": [4, 32], "int": [4, 5, 6, 32], "design": [4, 5, 24, 32], "ndesign": [4, 32], "static": [4, 5, 32], "rand_irreduc": [4, 5, 14, 15, 18, 19, 31, 32], "0000000000000007": 4, "ration": 4, "scalabl": [4, 24], "multipli": [4, 5], "global": [4, 5], "scall": 4, "basi": [4, 5], "global_sc": [4, 5, 6, 14, 15, 19, 32], "scaling_typ": [4, 5], "equivalent_ifn": [4, 5, 6, 14, 15, 19, 32], "m": [4, 5, 11, 32, 33], "_": 4, "000000000000002": 4, "9999999999999998": 4, "sure": 4, "satisfi": 4, "37": 4, "predefin": 4, "38": 4, "val": [4, 5], "f1": [4, 32], "99": 4, "99999999999996": 4, "300": 4, "200": 4, "333333333333331": 4, "40": [4, 34], "92307692307689": 4, "lastli": 4, "41": 4, "compar": [4, 5], "later": [4, 5], "instead": [4, 34], "fill": [4, 5], "42": 4, "n2": [4, 5, 32], "correctli": [4, 35], "43": 4, "44": 4, "s1": 4, "array_equ": 4, "coefici": 4, "coeffcient": 4, "divid": 4, "due": [4, 32], "round": [4, 5], "off": 4, "n1": [4, 5, 32], "45": 4, "coef": [4, 32], "000000000000005": 4, "18644922528524344": 4, "46": 4, "is_equivalent_ifn": [4, 5, 14, 15, 19], "case": [4, 5], "wa": [4, 5], "anymor": 4, "calcul": [4, 5], "anywai": 4, "47": 4, "n3": [4, 32], "network_delete_cloud": [4, 5, 14, 15, 19, 22], "48": 4, "sept": 4, "2017": 4, "oct": [4, 5], "2024": [4, 5, 32], "cite": 4, "k": [4, 5, 32, 33], "anaysi": 4, "copyright": [4, 5, 32], "author": 5, "revoledu": 5, "com": [5, 33], "ifn": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 35, 36], "variou": [5, 15, 24], "manipul": [5, 24], "matric": [5, 24], "metric": [5, 24, 33], "handl": [5, 24], "york": [5, 11, 32, 33], "chicago": [5, 11], "denver": [5, 11], "toronto": [5, 11, 32], "800": [5, 11], "1900": [5, 11], "2018": [5, 32], "manag": [5, 15, 24], "abs_diff_capacity_flow": [5, 13, 14, 15, 19, 31], "w1": 5, "float": [5, 11], "w2": 5, "scalar": 5, "add_first_link": [5, 15, 16, 19], "str": [5, 6], "none": [5, 32], "shortcut": 5, "get_link": [5, 15, 16, 19, 32], "add_last_link": [5, 15, 16, 19], "get_link_flow": [5, 13, 15, 16, 19, 32], "nodenam": [5, 32], "add_random_on": [5, 15, 18, 19], "ndarrai": 5, "ones": 5, "locat": [5, 33, 35], "less": 5, "than": [5, 34], "anyth": 5, "current": 5, "squar": 5, "updated_a": 5, "adj_list_to_matrix": [5, 7, 9, 11, 15, 18, 19], "adjl": 5, "dict": 5, "adjacency_to_stochast": [5, 14, 15, 18, 19, 30], "stochastic_matrix": 5, "tupl": 5, "correspond": 5, "ascii": 5, "charact": 5, "th": [5, 32], "alphabet": [5, 32], "rajectori": 5, "assign_adjacency_list": [5, 14, 15, 19, 28], "bool": 5, "assign_cycle_to_matrix": [5, 15, 19], "dtype": [5, 34], "association_predict_actor_net": [5, 10, 15, 19], "netactor": 5, "netsystem": 5, "association_predict_trajectori": [5, 10, 15, 19], "itemset": 5, "given": [5, 6, 34], "support": 5, "confid": 5, "sort": 5, "supp": 5, "conf": 5, "association_train": [5, 10, 15, 19], "overlai": [5, 10, 15, 19, 22], "onto": 5, "permut": [5, 15, 19, 36], "initi": [5, 32], "average_flow_matrix": [5, 15, 19], "avg_flow_valu": 5, "avg_entropi": 5, "average_node_entropy_matrix": [5, 15, 19], "average_node_entropy_ratio_matrix": [5, 15, 19], "backtrack": [5, 15, 19, 26], "travers": 5, "rout": [5, 32], "dead": 5, "invalid": 5, "exact": 5, "target": 5, "backtracking_cycle_limit": [5, 15, 19], "max_internal_cycl": 5, "visited_nod": 5, "limit": 5, "visit": 5, "bf": [5, 15, 19, 26], "breadth": 5, "dure": 5, "bfs_until": [5, 15, 19, 26], "binarized_matrix": [5, 15, 18, 19, 22], "binari": 5, "binar": 5, "bin_matrix": 5, "canon": [5, 8, 15, 19, 28, 36], "rotat": 5, "lexicograph": 5, "smallest": 5, "letter": [5, 11], "bca": 5, "fde": 5, "canonize_cycle_dict": [5, 8, 15, 19, 28], "cycle_dict": 5, "normal": 5, "cab": 5, "canonize_signatur": [5, 15, 19], "relabel": 5, "2abc": 5, "to_adjacency_matrix": [5, 15, 18, 19], "capacity_to_balance_inflow_outflow": [5, 14, 15, 18, 19], "lambda_": 5, "lambda": 5, "capacity_to_congest": [5, 14, 15, 18, 19, 31], "capacity_multipli": 5, "75": [5, 35], "alpha": 5, "beta": 5, "1e": 5, "05": 5, "epsilon": 5, "2d": 5, "convers": 5, "col": 5, "alpha_beta_row": 5, "alpha_beta_col": 5, "wise": 5, "transform": [5, 32], "alpha_beta": 5, "small": 5, "divis": 5, "cardinal_ifn_signatur": [5, 15, 19], "cardin": 5, "minim": 5, "describ": 5, "change_flow_in_cycl": [5, 8, 13, 15, 19], "subtract": [5, 32], "amount": [5, 33], "flows_in_cycl": [5, 8, 13, 15, 19], "flow_matrix_to_adj_list": [5, 7, 13, 14, 15, 18, 19], "find_all_cycles_in_adj_list": [5, 8, 15, 19, 28], "color_graph": [5, 15, 19], "color": [5, 15], "po": 5, "determin": 5, "bipartit": [5, 32], "uncolor": 5, "bc": 5, "complement": [5, 10, 15, 19, 22], "minu": 5, "result_net": 5, "complete_graph": [5, 10, 15, 19, 22], "complete_net": 5, "compos": [5, 14, 15, 19, 28], "string_to_matrix": [5, 8, 15, 18, 19], "ba": 5, "except": 5, "congestion_matrix": 5, "copy_dict": [5, 15, 19], "dic": 5, "shallow": 5, "nest": [5, 11], "copy_d": 5, "cov_flow_matrix": [5, 13, 15, 19, 21], "coef_var": 5, "create_node_map": [5, 15, 19, 28, 36], "net_signatur": 5, "map": 5, "jump": 5, "relabel_signatur": [5, 15, 19], "reverse_relabel_signatur": [5, 15, 19], "bcd": 5, "cycle_dict_to_signatur": [5, 15, 19, 28], "acd": 5, "3acd": 5, "2bc": 5, "cycle_length": [5, 8, 15, 19], "cycle_sum_weight": [5, 8, 15, 19], "decimal_to_fract": [5, 15, 19, 36], "decim": 5, "toler": 5, "06": 5, "closest": 5, "fraction": 5, "stern": 5, "brocot": 5, "tree": 5, "approach": 5, "precis": 5, "digit": 5, "denomin": 5, "333333": 5, "111111": 5, "355": 5, "113": 5, "decompos": [5, 14, 15, 19, 28], "rais": [], "valueerror": 5, "find_all_cycles_in_matrix": [5, 8, 15, 18, 19, 28], "3a": 5, "2ab": 5, "nan": 5, "maxim": 5, "6666666666666666": 5, "recurs": 5, "unvisit": 5, "reachabl": 5, "look": [5, 34], "destin": 5, "been": 5, "vari": 5, "dfs_adj_list": [5, 15, 19], "v": 5, "stack": 5, "adj_list": [5, 24], "dfs_until": [5, 15, 19, 26], "behav": 5, "halt": 5, "soon": 5, "stop": [5, 33], "longest": 5, "eccentr": 5, "vertex": 5, "distanc": 5, "vertic": [5, 11], "greatest": 5, "net2": 5, "net1": 5, "smaller": 5, "base_net": 5, "diff_net": 5, "duplic": [5, 15, 19, 22], "duplicate_net": 5, "is_round": 5, "equival": [5, 15], "scaled_f": 5, "excel_col_to_num": [5, 15, 19, 36], "excel": 5, "aa": 5, "extract_first_k_term": [5, 8, 15, 19, 28], "cycle_str": 5, "extract_last_k_term": [5, 8, 15, 19, 28], "find_a_cycl": [5, 8, 15, 19], "target_nod": 5, "find_all_permutation_cycl": [5, 8, 15, 19], "find_all_walks_in_matrix": [5, 15, 19, 25, 28], "find_cardinal_ifn_signature_exhaust": [5, 15, 19], "exhaust": 5, "find_cycl": [5, 8, 15, 19], "digraph": 5, "uniqu": [5, 34], "find_element_in_list": [5, 15, 19], "list_el": 5, "find_key_in_dict": [5, 15, 19], "match": [5, 10, 15, 19, 25, 32, 33], "find_path": [5, 15, 19, 25, 32], "find_path_cycle_limit": [5, 15, 19], "node_visit_count": 5, "find_pivot_typ": [5, 15, 19, 28], "cycle1": 5, "cycle2": 5, "second": [5, 11, 34], "find_pivot": [5, 15, 19, 28], "cde": 5, "form_link_cycle_matrix": [5, 8, 15, 19], "h": [5, 33], "vector": [5, 11, 15, 19, 32], "from_base62": [5, 15, 19, 36], "base62": 5, "62": 5, "allow_internal_cycl": 5, "self": [5, 32], "cloud_nam": 5, "techniqu": 5, "generate_combin": [5, 15, 19, 36], "generate_random_term": [5, 8, 15, 19, 28], "is_premi": [5, 14], "randomli": 5, "2a": 5, "1b": 5, "adj_matrix": 5, "get_path_entropi": [5, 12, 15, 19, 25, 32], "isupdatefirst": 5, "greater": 5, "9182958340544896": 5, "get_path_prob": [5, 15, 19, 25, 27, 30], "avg": 5, "prob": 5, "avg_prob": 5, "num_link": 5, "std": 5, "cov": 5, "hadamard_divis": [5, 15, 19, 36], "elementwis": 5, "has_pivot": [5, 8, 15, 19, 28], "perron": 5, "identify_unique_nod": [5, 8, 15, 19], "in_degre": [5, 15, 19, 20, 23], "incom": 5, "in_neighbor": [5, 15, 19, 20], "tonod": [5, 32], "predecessor": 5, "in_weight": [5, 13, 15, 19, 20], "intersect_net": 5, "inverse_dict": [5, 15, 19], "acycl": 5, "present": 5, "track": 5, "is_cycle_canon": [5, 8, 15, 19], "is_cycle_has_coef_1": [5, 15, 19, 28], "is_edge_in_cycl": [5, 8, 15, 16, 19], "j": [5, 33], "index": [5, 15, 24], "is_equal_network": [5, 15, 19, 22], "is_equal_signatur": [5, 15, 19, 28], "signature1": 5, "signature2": 5, "sig1": 5, "sig2": 5, "eulerian": 5, "ma": 5, "slow": 5, "larg": [5, 33], "is_irreducible_signatur": [5, 14, 15, 19, 28], "cycle_signatur": 5, "abd": 5, "is_non_empty_adj_list": [5, 7, 15, 19], "is_non_negative_matrix": [5, 15, 18, 19], "is_positive_matrix": [5, 15, 18, 19], "approxim": 5, "is_premier_matrix": [5, 15, 19, 28], "premier": 5, "is_premier_signatur": [5, 15, 19], "is_reach": [5, 15, 19, 25], "is_row_stochastic_matrix": [5, 15, 18, 19, 30], "is_square_matrix": [5, 15, 18, 19], "is_trajectory_cycl": [5, 8, 15, 19, 25], "is_valid_signatur": [5, 15, 19, 28], "5abc": 5, "2bcd": 5, "bac": 5, "dcb": 5, "cbcd": 5, "kappa_valu": 5, "link_combin": [5, 10, 15, 16, 19], "link_cycle_matrix": [5, 8, 15, 19, 28], "link_permut": [5, 10, 15, 16, 19], "json": 5, "load_adj_list": [5, 7, 15, 19], "previou": 5, "steadystatemc": 5, "stochastic_to_pi": [5, 14, 15, 17, 19, 30, 31], "dicifn": 5, "percentag": 5, "ifn1": 5, "ifn2": 5, "matrix_apply_cycl": [5, 8, 15, 18, 19], "flow_matrix": 5, "updated_matrix": 5, "matrix_replace_valu": [5, 15, 19], "old_valu": 5, "new_valu": 5, "modifi": [5, 29], "matrix_to_adj_list": [5, 7, 9, 11, 15, 18, 19], "max_flow_matrix": [5, 15, 19], "max_flow_valu": 5, "max_flow_path": [5, 15, 19], "max_path": 5, "max_network_entropi": [5, 12, 15, 19], "p": [5, 33], "max_entropi": 5, "merge_adjacency_list": [5, 14, 15, 19, 28], "adj_list1": 5, "adj_list2": 5, "merge_signatur": [5, 15, 19, 28], "min_flow_matrix": [5, 15, 19], "min_flow_valu": 5, "min_flow_path": [5, 15, 19], "min_path": 5, "min_irreduc": [5, 10, 14, 15, 18, 19, 22], "size": [5, 11, 32, 33], "clean_net": 5, "network_entropy_matrix": [5, 12, 15, 19], "network_entropy_ratio_matrix": [5, 15, 19], "network_prob": [5, 15, 19, 32], "node_index": [5, 15, 19, 23, 36], "lowercas": 5, "uppercas": 5, "51": 5, "52": 5, "multi": 5, "682": 5, "node_nam": [5, 15, 19, 23, 36], "respect": 5, "num_to_excel_col": [5, 15, 19], "num": 5, "az": 5, "renam": 5, "num_to_str_fract": [5, 15, 19, 36], "order_markov_high": [5, 6, 10, 14, 15, 17, 19], "higher": 5, "agreement": [5, 11, 34], "supernod": 5, "hash": [5, 34], "order_markov_low": [5, 6, 10, 14, 15, 17, 19], "trajsup": [5, 6], "high": [5, 34], "out_degre": [5, 15, 19, 20, 23], "outgo": 5, "out_neighbor": [5, 15, 19, 20], "successor": 5, "out_weight": [5, 13, 15, 19, 20], "overlay_net": 5, "parse_cycl": [5, 8, 15, 19, 36], "pars": [5, 33], "parse_terms_to_dict": [5, 8, 15, 19, 28, 36], "3c": 5, "2bca": 5, "5def": 5, "path_dist": [5, 15, 19, 25, 32], "path_length": [5, 15, 19, 25], "path_sum_weight": [5, 13, 15, 19, 25, 32], "acb": 5, "cba": 5, "premier_ifn": [5, 14, 15, 18, 19, 28], "regardless": 5, "premier_flow": 5, "premier_signatur": [5, 15, 19, 28], "queri": [5, 15, 19, 24, 33], "query_cycle_limit": [5, 15, 19], "pathfind": 5, "nquery_cycle_limit": 5, "rand_capac": [5, 6, 14, 15, 18, 19, 31, 32], "max_capac": [5, 6], "rand_ifn_signatur": [5, 14, 15, 19, 28], "meet": [5, 33], "findifnsignatur": 5, "50": 5, "abcd": 5, "6abc": 5, "4bcd": 5, "2ade": 5, "exce": 5, "unless": 5, "necessari": 5, "rand_int": [5, 15, 18, 19], "mr": 5, "mc": 5, "max_val": 5, "bias": 5, "entri": [5, 32], "rand_permutation_ey": [5, 15, 18, 19], "ident": 5, "permuted_ey": 5, "rand_stochast": [5, 15, 18, 19, 30], "random_cycle_from": [5, 15, 19, 27], "startendnod": 5, "infin": 5, "chosen": 5, "probabilist": 5, "toward": 5, "special": 5, "disallow": 5, "unrestrict": 5, "random_ideal_flow_matrix": [5, 14, 15, 18, 19], "random_ifn": [5, 14, 15, 18, 19, 28], "random_network": 5, "random_irreducible_stochast": [5, 14, 15, 18, 19, 30, 31], "random_walk_cycl": [5, 8, 15, 19, 25, 27], "start_end_nod": 5, "random_walk_from": [5, 15, 19, 27], "either": [5, 11, 32], "termin": 5, "upon": 5, "revisit": 5, "exceed": 5, "multipl": 5, "proport": 5, "lower": [5, 11], "random_walk_matrix": [5, 15, 18, 19, 27], "m_capac": 5, "arr_nam": 5, "prev_index": 5, "markov_matrix": 5, "next_nod": 5, "next_index": 5, "random_walk_nod": [5, 15, 19, 25, 27], "read_csv": [5, 15, 19, 34, 36], "fname": [5, 34], "csv": [5, 34], "reindex": [5, 15, 19, 36], "dataset": 5, "node_map": 5, "xyz": 5, "yzd": 5, "reverse_network": [5, 15, 19, 32], "revers": [5, 32], "reversed_net": 5, "relabeled_signatur": 5, "row_stochast": [5, 15, 19], "save_adj_list": [5, 7, 15, 19], "side": 5, "attribut": 5, "store": 5, "set_link_weight": [5, 13, 15, 16, 19, 32], "set_link_weight_plus_1": [5, 13, 15, 16, 19, 32], "increment": 5, "addit": [5, 33], "alongth": 5, "planar": [5, 32], "mnode": 5, "arrthreshold": 5, "matplotlib": 5, "networkx": 5, "fruchterman": [5, 32], "kawai": [5, 32], "shell": [5, 32], "spectral": [5, 32], "spiral": [5, 32], "spring": [5, 32], "custom": 5, "should": 5, "threshold": 5, "format": [5, 34], "low_threshold": 5, "high_threshold": 5, "id": [5, 32], "highlight": 5, "red": 5, "nx": 5, "signature_coef_to_1": [5, 15, 19], "3fde": 5, "signature_to_adj_list": [5, 14, 15, 19, 28], "signature_to_coef_flow": [5, 13, 14, 15, 19, 28], "signature_to_column_stochast": [5, 15, 19, 28], "signature_to_ideal_flow": [5, 14, 15, 19, 28], "signature_to_kappa": [5, 13, 14, 15, 19, 28], "signature_to_link_flow": [5, 15, 19, 28], "de": 5, "ef": 5, "fd": 5, "signature_to_link": [5, 15, 16, 19, 28], "signature_to_max_flow": [5, 13, 14, 15, 19, 28], "signature_to_min_flow": [5, 13, 14, 15, 19, 28], "signature_to_num_link": [5, 15, 16, 19, 28], "signature_to_num_nod": [5, 15, 19, 23, 28], "signature_to_pivot": [5, 15, 19, 28], "signature_to_row_stochast": [5, 15, 19, 28], "signature_to_sum_col": [5, 15, 19, 28], "signature_to_sum_row": [5, 15, 19, 28], "solve_cycl": [5, 8, 15, 19], "lsq_linear": 5, "solv": [5, 15], "decomposit": 5, "pinv": 5, "nnl": 5, "solut": 5, "unsupport": 5, "stationary_markov_chain": [5, 14, 15, 17, 19, 31], "stationary_dist": 5, "stdev_flow_matrix": [5, 15, 19], "std_flow_valu": 5, "stochastic_to_ideal_flow": [5, 14, 15, 17, 18, 19, 30, 32], "le": 5, "els": 5, "fast": 5, "inaccur": 5, "phi": 5, "stochastic_to_prob": [5, 15, 18, 19, 30], "prob_matrix": 5, "str_to_num": [5, 15, 19], "sum_dict_valu": [5, 15, 19], "col_sum": 5, "row_sum": 5, "to_base62": [5, 15, 19, 36], "123": 5, "1z": 5, "to_equal_inflow": [5, 14, 15, 18, 19], "to_equal_outflow": [5, 14, 15, 18, 19], "to_graph": [5, 15, 19, 22], "symmetr": 5, "counterpart": 5, "graph_net": 5, "to_markov_ord": [5, 10, 14, 15, 17, 19], "toorder": 5, "roperti": 5, "trajectory_to_link": [5, 10, 15, 16, 19, 25], "union": [5, 10, 15, 19, 22], "union_net": 5, "univers": [5, 10, 15, 19, 22], "universe_net": 5, "unassign": 5, "weighted_random_choic": [5, 15, 19, 27, 30], "v15": 5, "dec": 5, "2021": 5, "markovord": [5, 15, 19, 34], "topnod": [], "ifnnam": 5, "trajcode2varv": [5, 15, 19], "traj": 6, "trajvarval2cod": [5, 15, 19], "updatelut": [], "varval": 5, "wed": 5, "09": [], "py": [5, 35], "v1": 5, "tableclassifi": 5, "converttable2cod": [], "deleteacolumn": [], "deletearow": [], "58": 5, "udat": 5, "markov_ord": 5, "text_id": 5, "model_nam": 5, "languag": [5, 15], "english": 5, "intents_fil": 5, "intent": [5, 33], "entity_patterns_fil": 5, "entity_pattern": 5, "nlu": 5, "nlp": [5, 15, 19, 33], "task": [5, 34], "add_entity_pattern": [5, 15, 19, 33], "entity_typ": 5, "descript": 5, "entiti": [5, 33], "regex": 5, "email": [5, 33], "add_int": [5, 15, 19, 33], "intent_nam": 5, "keyword": 5, "schedule_meet": [5, 33], "schedul": [5, 33], "appoint": [5, 33], "average_sentence_length": [5, 15, 19, 33], "per": [5, 34], "average_word_length": [5, 15, 19], "bag_of_word": [5, 15, 19, 33], "token": [5, 15, 19, 33], "bag": [5, 33], "frequenc": 5, "bow": [5, 33], "build_dependency_tre": [5, 15, 19], "pos_tag": 5, "tag": 5, "detoken": [5, 15, 19, 33], "hello": 5, "entity_recognit": [5, 15, 19, 33], "book": [5, 33], "flight": [5, 33], "septemb": [5, 33], "21st": [5, 33], "evalu": [5, 15, 19, 33], "test_data": [5, 33], "assess": 5, "expected_int": 5, "book_flight": 33, "get_paragraph": [5, 15, 19, 33], "paragraph": [5, 33], "rtype": 5, "text_nam": [], "get_sent": [5, 15, 19, 33], "split": [5, 34], "intent_recognit": [5, 15, 19], "user": [5, 34], "lemmat": [5, 15, 19], "lemmatized_token": 5, "run": [5, 35], "load_model": [5, 15, 19], "filepath": 5, "pre": 5, "npz": 5, "load_pattern": [5, 15, 19], "load_text": [5, 15, 19], "file_nam": [5, 34], "memori": [5, 34], "ngram": [5, 15, 19, 33], "gram": 5, "normalize_text": [5, 15, 19], "normalized_text": 5, "parse_sent": [5, 15, 19, 33], "grammat": 5, "subject": [5, 33], "predic": 5, "cat": 5, "eat": 5, "fish": 5, "parse_tre": 5, "quick": 5, "brown": 5, "fox": 5, "lazi": 5, "dog": 5, "plot_word_frequ": [5, 15, 19], "top_n": 5, "plot": 5, "top": 5, "classif": [5, 15], "recognit": [5, 33], "repetit": [], "remove_stopword": [5, 15, 19, 33], "filtered_token": [5, 33], "save_ent": [5, 15, 19], "save_int": [5, 15, 19, 33], "save_model": [5, 15, 19], "sentence_to_token": [5, 15, 19], "sentences_to_text": [5, 15, 19], "set_text": [5, 15, 19], "simple_pos_tag": [5, 15, 19], "speech": 5, "sat": 5, "summar": [5, 15, 19], "n_sentenc": 5, "summari": [5, 15], "long_text": 5, "text_to_paragraph": [5, 15, 19], "text_to_sent": [5, 15, 19], "training_data_s": [5, 15, 19], "unique_words_s": [5, 15, 19], "update_model": [5, 15, 19, 33], "new_data": [5, 33], "suitabl": 5, "process": [5, 15], "vocabulary_s": [5, 15, 19, 33], "vocabulari": [5, 33], "word_frequ": [5, 15, 19], "argv": 5, "strhelp": [], "112": 6, "119": 6, "84": 6, "72": 6, "56": 6, "160": [6, 32], "traj1": 6, "traj2": 6, "ord": 6, "16494845360824753": 6, "02356406480117822": 6, "04712812960235644": 6, "17525773195876299": 6, "12371134020618568": 6, "10603829160530204": 6, "010309278350515476": 6, "030927835051546428": 6, "0824742268041238": 6, "23564064801178192": 6, "trajsuper1": 6, "trajsuper2": 6, "trajsuper3": 6, "trajsuper4": 6, "trajsuper5": 6, "trajsuper6": 6, "trajsuper7": 6, "trajsuper8": 6, "trajsuper9": 6, "trajsuper10": 6, "trajsuper11": 6, "trajsuper12": 6, "assign_cycl": 8, "canonical_cycl": [8, 28], "canonicalize_cycle_str": [8, 28], "cycle_dict2_signatur": 8, "77": 11, "012": 11, "916": 11, "calgari": 11, "houston": 11, "1500": 11, "lo": 11, "angel": 11, "urbana": 11, "500": 11, "1800": 11, "dimension": 11, "tell": 11, "privat": 11, "doubl": 11, "underscor": 11, "__": 11, "capit": 11, "incid": [11, 32], "terminologi": [11, 15], "consist": 11, "average_node_entropy_flow": 12, "signature_tolink_flow": [13, 14], "cardinal_ifn": [14, 28], "overview": 15, "usag": [15, 32], "layer": 15, "beginn": [15, 24], "instal": 15, "notat": 15, "studi": 15, "harmoni": 15, "vision": 15, "music": 15, "medicin": 15, "transport": [15, 24], "why": 15, "Be": 15, "problem": 15, "conclus": 15, "supervis": 15, "prepar": [5, 15], "spiritu": 15, "moral": 15, "belief": 15, "principl": 15, "abstract": 15, "life": 15, "lesson": 15, "integr": 15, "honesti": 15, "karma": 15, "feedback": 15, "convent": 15, "submodul": [15, 19], "neighborhood": [15, 24], "util": [15, 24], "helper": 15, "arr_sequence_to_markov": [17, 25], "coef_var_flow": 18, "matrix_round_integ": 18, "std_flow": 18, "get_reverse_network": 22, "is_premagic_network": 22, "get_nod": 23, "primari": 24, "get_neighbor": 24, "retriev": [5, 24], "detail": [24, 34], "api": 24, "flow_manag": 24, "convert_signature_coef_to_1": 28, "canonize_net_signatur": 28, "find_cardinal_ifn_exhaust": 28, "relabel_net_signatur": 28, "reverse_relabel_net_signatur": 28, "ordinari": 29, "get_network_prob": 30, "get_row_stochast": 30, "signature2_column_stochast": 30, "signature2_row_stochast": 30, "145": 32, "nework": 32, "explicitli": 32, "linkflow": 32, "146": 32, "147": 32, "titl": 32, "avail": 32, "148": 32, "149": 32, "150": 32, "set_item": 32, "151": 32, "access": 32, "get_item": 32, "152": 32, "fromnod": 32, "reprsent": 32, "yield": 32, "154": 32, "accompani": 32, "155": 32, "156": 32, "157": 32, "158": 32, "159": 32, "161": 32, "nt": 32, "transpos": 32, "162": 32, "f0": 32, "nodes0": 32, "nodes1": 32, "163": 32, "164": 32, "165": 32, "166": 32, "167": 32, "168": 32, "169": 32, "170": 32, "171": 32, "172": 32, "173": 32, "174": 32, "beij": 32, "london": 32, "berlin": 32, "tokyo": 32, "few": 32, "variant": 32, "dictonari": 32, "78": 32, "171231309893255": 32, "14707313230461527": 32, "exercis": 32, "ouflow": 32, "sever": [32, 34], "175": 32, "alon": 32, "176": 32, "totalflow": 32, "nodesflow": 32, "177": 32, "final": [32, 34], "178": 32, "shorter": 32, "08333333": 32, "manual": [32, 35], "ino": 32, "defn": 32, "179": 32, "network1": 32, "nodesequ": 32, "pathentropy1": 32, "abgh": 32, "19230769": 32, "26923077": 32, "03846154": 32, "19230769230769218": 32, "03846153846153843": 32, "23076923076923062": 32, "03846153846153836": 32, "23076923076923095": 32, "19230769230769254": 32, "07692307692307701": 32, "4727965657843897": 32, "1923076923076921": 32, "038461538461538415": 32, "2307692307692305": 32, "038461538461538346": 32, "23076923076923084": 32, "19230769230769246": 32, "07692307692307698": 32, "26923076923076894": 32, "26923076923076944": 32, "ireduc": 32, "180": [32, 34], "19230769230769232": 32, "038461538461538464": 32, "23076923076923078": 32, "07692307692307693": 32, "181": 32, "longer": 32, "20833333333333331": 32, "041666666666666664": 32, "08333333333333333": 32, "182": 32, "83333333": 32, "71428571": 32, "28571429": 32, "04167548": 32, "54622382": 32, "7311191": 32, "93801565": 32, "92363021": 32, "16945208": 32, "19970269790557324": 32, "04767926872559459": 32, "23839634362797296": 32, "2510538693645723": 32, "18797701455449065": 32, "07519080582179624": 32, "183": 32, "st": 32, "41491065": 32, "45557664": 32, "70159333": 32, "0461331": 32, "08081013": 32, "33441793": 32, "1832503413653255": 32, "24681392362927387": 32, "07051826389407824": 32, "0004854407405646304": 32, "23234778956044813": 32, "26658424081030957": 32, "184": 32, "pathentropi": 32, "185": 32, "186": 32, "187": 32, "188": 32, "189": 32, "190": 32, "191": 32, "0000000000000195": 32, "0000000000000049": 32, "000000000000026": 32, "000000000000024": 32, "192": 32, "equilibrium": 32, "193": 32, "ifn_test_1": 35, "131": 35, "ifn_test_2": 35, "ifn_test_3": 35, "directori": 35, "test_path": 35, "o": [33, 34, 35], "abspath": 35, "getcwd": 35, "sy": 35, "append": 35, "ifn_unit_test": 35, "unittest": 35, "suit": 35, "loader": 35, "testload": 35, "suite1": 35, "loadtestsfrommodul": 35, "suite2": 35, "suite3": 35, "runner": 35, "texttestrunn": 35, "verbos": 35, "ifn_tests_1": 35, "ifn_tests_2": 35, "ifn_tests_3": 35, "find_common_nod": 36, "execut": 5, "interfac": 5, "inherit": 5, "clf": 5, "argument": 5, "__str_help__": [5, 15, 19], "messag": 5, "y1": 5, "x1": 5, "x2": 5, "appropri": 5, "success": 5, "failur": 5, "indexerror": 5, "insuffici": 5, "sep": 5, "__str__": 5, "top_nod": [5, 15, 19], "update_lut": [5, 15, 19], "lookup": 5, "text_classifi": 5, "2019": 5, "67": 5, "belong": 5, "var1": 5, "var2": 5, "filenotfounderror": 5, "predict_t": [5, 15, 19, 34], "header": 5, "oserror": 5, "graphic": 5, "textual": 5, "node1": 5, "node2": 5, "hashcod": 5, "3f2b5e": 5, "1a2b3c": 5, "table_classifi": [5, 15, 19, 34], "prepare_data_t": [5, 15, 19, 34], "__take_a_column__": [5, 15, 19], "__takearow__": [5, 15, 19], "__delete_a_row__": [5, 15, 19], "__convert__table_to_code__": [5, 15, 19], "__delete_a_column__": [5, 15, 19], "jun": 5, "rest": 5, "ift": [5, 33, 34], "my_text": [5, 33], "proper": 5, "rule": 5, "block": 5, "latex": 5, "formula": 5, "markdown": 5, "syntax": 5, "successfulli": [5, 33], "predict_text_categori": [5, 15, 19, 33], "find_categori": 5, "word1": 5, "word2": 5, "word3": 5, "word4": 5, "85": 5, "120": [5, 34], "mode": 15, "commandlin": [15, 19], "subfield": 33, "linguist": 33, "concern": 33, "interact": 33, "enough": 33, "right": 33, "nit": 33, "nin": 33, "nlut": 33, "search_text": 33, "k1": 33, "az2": 33, "ci7": 33, "aw9": 33, "bd6": 33, "ca9": 33, "ce3": [33, 34], "ba3": 33, "cu9": 33, "bq9": 33, "cf4": [33, 34], "ck9": 33, "r8": 33, "ab8": 33, "aih18": 33, "p6": 33, "wr16": 33, "av8": 33, "zc79": 33, "x4": 33, "ads99": 33, "be7": 33, "ad0": [33, 34], "bx6": 33, "aaz28": 33, "br0": 33, "hwv028": 33, "s9": 33, "bz8": 33, "y5": 33, "m3": 33, "ah4": 33, "bc5": [33, 34], "glm057": 33, "aa7": 33, "pl28": 33, "agt78": 33, "ct8": 33, "oz16": 33, "bs1": 33, "cp4": 33, "016483516483516484": 33, "014285714285714285": 33, "new_text": 33, "filter": 33, "avg_sentence_length": 33, "vocab_s": 33, "john": 33, "sent": 33, "jane": 33, "januari": 33, "5th": 33, "input_text": 33, "00": 33, "pm": 33, "pari": 33, "weather": 33, "weather_queri": 33, "hi": 33, "greet": 33, "pizza": 33, "deliveri": 33, "order_food": 33, "address": 33, "alic": 33, "bob": 33, "octob": 33, "10th": 33, "send": 33, "emotionemoji": 33, "ordinalnumb": 33, "firstnam": 33, "dockerimagetag": 33, "l": 33, "emaildomain": 33, "scientificnam": 33, "month": 33, "timeexpressionspecif": 33, "chemicalformula": 33, "computerportnumb": 33, "time12hour": 33, "stocktick": 33, "textbook": 34, "onward": 34, "restrict": 34, "calbrat": 34, "co3": 34, "bw5": 34, "an0": 34, "aj6": 34, "w3": 34, "ao1": 34, "60": 34, "j0": 34, "bp8": 34, "80": 34, "cn2": 34, "240": 34, "ch6": 34, "7525988740957668": 34, "7374730387072518": 34, "6481206209700475": 34, "6920434112665808": 34, "8441468861635344": 34, "5540675820478976": 34, "6868684713085881": 34, "6602610945413664": 34, "chart": 34, "Or": 34, "whichev": 34, "convini": 34, "inv_lut": 34, "down": 34, "slower": 34, "networksci": 34, "softwar": 34, "reusabledata": 34, "transportationmod": 34, "gender": 34, "carownership": 34, "travelcost": 34, "incomelevel": 34, "male": 34, "cheap": 34, "low": 34, "bu": 34, "medium": 34, "femal": 34, "expens": 34, "car": 34, "lt": 34, "u18": 34, "trainig": 34, "ag3": 34, "au7": 34, "cl0": 34, "bg9": 34, "ar4": 34, "bk3": 34, "bv4": 34, "calibr": 34, "6750483087451475": 34, "49609720217760156": 34, "6482798534722021": 34, "4535373600380497": 34, "5246693416824477": 34, "5644074501213597": 34, "6294248059480595": 34, "4934139346435913": 34, "749974691428685": 34, "grapic": 34}, "objects": {"": [[5, 0, 0, "-", "IdealFlow"]], "IdealFlow": [[5, 0, 0, "-", "Classifier"], [5, 0, 0, "-", "CommandLine"], [5, 0, 0, "-", "Network"], [5, 0, 0, "-", "Table"], [5, 0, 0, "-", "Text"]], "IdealFlow.Classifier": [[5, 1, 1, "", "Classifier"]], "IdealFlow.Classifier.Classifier": [[5, 2, 1, "", "fit"], [5, 2, 1, "", "generate"], [5, 2, 1, "", "load"], [5, 2, 1, "", "predict"], [5, 2, 1, "", "predict_table"], [5, 2, 1, "", "save"], [5, 2, 1, "", "show"], [5, 2, 1, "", "top_nodes"], [5, 2, 1, "", "train"], [5, 2, 1, "", "trajCode2VarVal"], [5, 2, 1, "", "trajVarVal2Code"], [5, 2, 1, "", "update_lut"]], "IdealFlow.CommandLine": [[5, 1, 1, "", "CommandLine"]], "IdealFlow.CommandLine.CommandLine": [[5, 2, 1, "", "__str_help__"], [5, 2, 1, "id0", "controller"], [5, 3, 1, "", "ifnc"]], "IdealFlow.Network": [[5, 1, 1, "", "IFN"]], "IdealFlow.Network.IFN": [[5, 2, 1, "", "abs_diff_capacity_flow"], [5, 2, 1, "", "add_first_link"], [5, 2, 1, "", "add_last_link"], [5, 2, 1, "", "add_link"], [5, 2, 1, "", "add_node"], [5, 2, 1, "", "add_random_ones"], [5, 2, 1, "", "adj_list_to_matrix"], [5, 2, 1, "", "adjacency_to_ideal_flow"], [5, 2, 1, "", "adjacency_to_stochastic"], [5, 2, 1, "", "all_shortest_path"], [5, 2, 1, "", "alphabet_list"], [5, 2, 1, "", "assign"], [5, 2, 1, "", "assign_adjacency_list"], [5, 2, 1, "", "assign_cycle_to_matrix"], [5, 2, 1, "", "association_predict_actor_net"], [5, 2, 1, "", "association_predict_trajectory"], [5, 2, 1, "", "association_train"], [5, 4, 1, "", "average_flow"], [5, 2, 1, "", "average_flow_matrix"], [5, 4, 1, "", "average_node_entropy"], [5, 2, 1, "", "average_node_entropy_matrix"], [5, 4, 1, "", "average_node_entropy_ratio"], [5, 2, 1, "", "average_node_entropy_ratio_matrix"], [5, 2, 1, "", "backtracking"], [5, 2, 1, "", "backtracking_cycle_limit"], [5, 2, 1, "", "bfs"], [5, 2, 1, "", "bfs_until"], [5, 2, 1, "", "binarized_matrix"], [5, 2, 1, "", "canonize"], [5, 2, 1, "", "canonize_cycle_dict"], [5, 2, 1, "", "canonize_signature"], [5, 2, 1, "", "capacity_to_adjacency"], [5, 2, 1, "", "capacity_to_balance_inflow_outflow"], [5, 2, 1, "", "capacity_to_congestion"], [5, 2, 1, "", "capacity_to_ideal_flow"], [5, 2, 1, "", "capacity_to_stochastic"], [5, 2, 1, "", "cardinal_ifn_signature"], [5, 2, 1, "", "change_flow_in_cycle"], [5, 2, 1, "", "color_graph"], [5, 2, 1, "", "combinations"], [5, 2, 1, "", "complement"], [5, 2, 1, "", "complete_graph"], [5, 2, 1, "", "compose"], [5, 2, 1, "", "congestion"], [5, 2, 1, "", "copy_dict"], [5, 4, 1, "", "cov_flow"], [5, 2, 1, "", "cov_flow_matrix"], [5, 2, 1, "", "create_node_mapping"], [5, 2, 1, "", "cycle_dict_to_signature"], [5, 2, 1, "", "cycle_length"], [5, 2, 1, "", "cycle_sum_weight"], [5, 2, 1, "", "decimal_to_fraction"], [5, 2, 1, "", "decompose"], [5, 2, 1, "", "delete_link"], [5, 2, 1, "", "delete_node"], [5, 4, 1, "", "density"], [5, 2, 1, "", "dfs"], [5, 2, 1, "", "dfs_adj_list"], [5, 2, 1, "", "dfs_until"], [5, 4, 1, "", "diameter"], [5, 2, 1, "", "difference"], [5, 2, 1, "", "duplicate"], [5, 2, 1, "", "equivalent_ifn"], [5, 2, 1, "", "excel_col_to_num"], [5, 2, 1, "", "extract_first_k_terms"], [5, 2, 1, "", "extract_last_k_terms"], [5, 2, 1, "", "find_a_cycle"], [5, 2, 1, "", "find_all_cycles_in_adj_list"], [5, 2, 1, "", "find_all_cycles_in_matrix"], [5, 2, 1, "", "find_all_paths"], [5, 2, 1, "", "find_all_permutation_cycles"], [5, 2, 1, "", "find_all_walks_in_matrix"], [5, 2, 1, "", "find_cardinal_ifn_signature_exhaustive"], [5, 2, 1, "", "find_cycles"], [5, 2, 1, "", "find_element_in_list"], [5, 2, 1, "", "find_key_in_dict"], [5, 2, 1, "", "find_path"], [5, 2, 1, "", "find_path_cycle_limit"], [5, 2, 1, "", "find_pivot_type"], [5, 2, 1, "", "find_pivots"], [5, 2, 1, "", "flow_matrix_to_adj_list"], [5, 2, 1, "", "flows_in_cycle"], [5, 2, 1, "", "form_link_cycle_matrix"], [5, 2, 1, "", "from_base62"], [5, 2, 1, "", "generate"], [5, 2, 1, "", "generate_combinations"], [5, 2, 1, "", "generate_random_terms"], [5, 2, 1, "", "get_data"], [5, 2, 1, "", "get_link_flow"], [5, 4, 1, "", "get_links"], [5, 2, 1, "", "get_matrix"], [5, 2, 1, "", "get_path"], [5, 2, 1, "", "get_path_entropy"], [5, 2, 1, "", "get_path_probability"], [5, 2, 1, "", "global_scaling"], [5, 2, 1, "", "hadamard_division"], [5, 2, 1, "", "has_pivot"], [5, 2, 1, "", "ideal_flow"], [5, 2, 1, "", "ideal_flow_to_stochastic"], [5, 2, 1, "", "identify_unique_nodes"], [5, 4, 1, "", "in_degree"], [5, 2, 1, "", "in_neighbors"], [5, 4, 1, "", "in_weight"], [5, 2, 1, "", "intersect"], [5, 2, 1, "", "inverse_dict"], [5, 4, 1, "", "is_acyclic"], [5, 4, 1, "", "is_bipartite"], [5, 4, 1, "", "is_connected"], [5, 4, 1, "", "is_contain_cycle"], [5, 2, 1, "", "is_cycle_canonical"], [5, 2, 1, "", "is_cycle_has_coef_1"], [5, 2, 1, "", "is_edge_in_cycle"], [5, 2, 1, "", "is_equal_network"], [5, 2, 1, "", "is_equal_signature"], [5, 2, 1, "", "is_equivalent_ifn"], [5, 4, 1, "", "is_eulerian_cycle"], [5, 4, 1, "", "is_ideal_flow"], [5, 2, 1, "", "is_ideal_flow_matrix"], [5, 2, 1, "", "is_irreducible_matrix"], [5, 2, 1, "", "is_irreducible_signature"], [5, 2, 1, "", "is_non_empty_adj_list"], [5, 2, 1, "", "is_non_negative_matrix"], [5, 2, 1, "", "is_path"], [5, 2, 1, "", "is_positive_matrix"], [5, 4, 1, "", "is_premagic"], [5, 2, 1, "", "is_premagic_matrix"], [5, 2, 1, "", "is_premier_matrix"], [5, 2, 1, "", "is_premier_signature"], [5, 2, 1, "", "is_reachable"], [5, 2, 1, "", "is_row_stochastic_matrix"], [5, 2, 1, "", "is_square_matrix"], [5, 4, 1, "", "is_strongly_connected"], [5, 2, 1, "", "is_trajectory_cycle"], [5, 2, 1, "", "is_valid_signature"], [5, 2, 1, "", "kappa"], [5, 2, 1, "", "link_combination"], [5, 2, 1, "", "link_cycle_matrix"], [5, 2, 1, "", "link_permutation"], [5, 2, 1, "", "load"], [5, 2, 1, "", "load_adj_list"], [5, 2, 1, "", "markov"], [5, 2, 1, "", "match"], [5, 2, 1, "", "matrix_apply_cycle"], [5, 2, 1, "", "matrix_replace_value"], [5, 2, 1, "", "matrix_to_adj_list"], [5, 4, 1, "", "max_flow"], [5, 2, 1, "", "max_flow_matrix"], [5, 2, 1, "", "max_flow_path"], [5, 2, 1, "", "max_network_entropy"], [5, 2, 1, "", "merge_adjacency_list"], [5, 2, 1, "", "merge_signatures"], [5, 4, 1, "", "min_flow"], [5, 2, 1, "", "min_flow_matrix"], [5, 2, 1, "", "min_flow_path"], [5, 2, 1, "", "min_irreducible"], [5, 2, 1, "", "network_delete_cloud"], [5, 4, 1, "", "network_entropy"], [5, 2, 1, "", "network_entropy_matrix"], [5, 4, 1, "", "network_entropy_ratio"], [5, 2, 1, "", "network_entropy_ratio_matrix"], [5, 4, 1, "", "network_probability"], [5, 2, 1, "", "node_index"], [5, 2, 1, "", "node_name"], [5, 4, 1, "", "nodes"], [5, 4, 1, "", "nodes_flow"], [5, 2, 1, "", "num_to_excel_col"], [5, 2, 1, "", "num_to_str_fraction"], [5, 2, 1, "", "order_markov_higher"], [5, 2, 1, "", "order_markov_lower"], [5, 4, 1, "", "out_degree"], [5, 2, 1, "", "out_neighbors"], [5, 4, 1, "", "out_weight"], [5, 2, 1, "", "overlay"], [5, 2, 1, "", "parse_cycle"], [5, 2, 1, "", "parse_terms_to_dict"], [5, 2, 1, "", "path_distance"], [5, 2, 1, "", "path_length"], [5, 2, 1, "", "path_sum_weight"], [5, 2, 1, "", "permutations"], [5, 2, 1, "", "premier_ifn"], [5, 2, 1, "", "premier_signature"], [5, 2, 1, "", "query"], [5, 2, 1, "", "query_cycle_limit"], [5, 2, 1, "", "rand_capacity"], [5, 2, 1, "", "rand_ifn_signature"], [5, 2, 1, "", "rand_int"], [5, 2, 1, "", "rand_irreducible"], [5, 2, 1, "", "rand_permutation_eye"], [5, 2, 1, "", "rand_stochastic"], [5, 2, 1, "", "random_cycle_from"], [5, 2, 1, "", "random_ideal_flow_matrix"], [5, 2, 1, "", "random_ifn"], [5, 2, 1, "", "random_irreducible_stochastic"], [5, 2, 1, "", "random_walk_cycle"], [5, 2, 1, "", "random_walk_from"], [5, 2, 1, "", "random_walk_matrix"], [5, 2, 1, "", "random_walk_nodes"], [5, 2, 1, "", "read_csv"], [5, 2, 1, "", "reduce_link_flow"], [5, 2, 1, "", "reindex"], [5, 2, 1, "", "relabel_signature"], [5, 2, 1, "", "reverse_network"], [5, 2, 1, "", "reverse_relabel_signature"], [5, 4, 1, "", "row_stochastic"], [5, 2, 1, "", "save"], [5, 2, 1, "", "save_adj_list"], [5, 2, 1, "", "set_data"], [5, 2, 1, "", "set_link_weight"], [5, 2, 1, "", "set_link_weight_plus_1"], [5, 2, 1, "", "set_matrix"], [5, 2, 1, "", "set_path"], [5, 2, 1, "", "shortest_path"], [5, 2, 1, "", "show"], [5, 2, 1, "", "signature_coef_to_1"], [5, 2, 1, "", "signature_to_adj_list"], [5, 2, 1, "", "signature_to_coef_flow"], [5, 2, 1, "", "signature_to_column_stochastic"], [5, 2, 1, "", "signature_to_ideal_flow"], [5, 2, 1, "", "signature_to_kappa"], [5, 2, 1, "", "signature_to_link_flow"], [5, 2, 1, "", "signature_to_links"], [5, 2, 1, "", "signature_to_max_flow"], [5, 2, 1, "", "signature_to_min_flow"], [5, 2, 1, "", "signature_to_num_links"], [5, 2, 1, "", "signature_to_num_nodes"], [5, 2, 1, "", "signature_to_pivots"], [5, 2, 1, "", "signature_to_row_stochastic"], [5, 2, 1, "", "signature_to_sum_cols"], [5, 2, 1, "", "signature_to_sum_rows"], [5, 2, 1, "", "solve_cycles"], [5, 2, 1, "", "stationary_markov_chain"], [5, 4, 1, "", "stdev_flow"], [5, 2, 1, "", "stdev_flow_matrix"], [5, 2, 1, "", "stochastic_to_entropy_ratio"], [5, 2, 1, "", "stochastic_to_ideal_flow"], [5, 2, 1, "", "stochastic_to_network_entropy"], [5, 2, 1, "", "stochastic_to_pi"], [5, 2, 1, "", "stochastic_to_probability"], [5, 2, 1, "", "str_to_num"], [5, 2, 1, "", "string_to_matrix"], [5, 2, 1, "", "sum_dict_values"], [5, 2, 1, "", "sum_of_col"], [5, 2, 1, "", "sum_of_row"], [5, 2, 1, "", "to_adjacency_matrix"], [5, 2, 1, "", "to_base62"], [5, 2, 1, "", "to_equal_inflow"], [5, 2, 1, "", "to_equal_outflow"], [5, 2, 1, "", "to_graph"], [5, 2, 1, "", "to_markov_order"], [5, 4, 1, "", "total_flow"], [5, 4, 1, "", "total_links"], [5, 4, 1, "", "total_nodes"], [5, 2, 1, "", "trajectory_to_links"], [5, 2, 1, "", "union"], [5, 2, 1, "", "universe"], [5, 2, 1, "", "unlearn"], [5, 2, 1, "", "weighted_random_choice"]], "IdealFlow.Table": [[5, 1, 1, "", "Table_Classifier"]], "IdealFlow.Table.Table_Classifier": [[5, 2, 1, "", "__convert__table_to_code__"], [5, 2, 1, "", "__delete_a_column__"], [5, 2, 1, "", "__delete_a_row__"], [5, 2, 1, "", "__takeARow__"], [5, 2, 1, "", "__take_a_column__"], [5, 3, 1, "", "markovOrder"], [5, 2, 1, "id28", "prepare_data_table"], [5, 3, 1, "", "variables"], [5, 3, 1, "", "version"]], "IdealFlow.Text": [[5, 1, 1, "", "NLP"]], "IdealFlow.Text.NLP": [[5, 2, 1, "", "add_entity_pattern"], [5, 2, 1, "", "add_intent"], [5, 2, 1, "id29", "average_sentence_length"], [5, 2, 1, "id30", "average_word_length"], [5, 2, 1, "", "bag_of_words"], [5, 2, 1, "", "build_dependency_tree"], [5, 2, 1, "", "detokenize"], [5, 2, 1, "", "entity_recognition"], [5, 2, 1, "", "evaluate"], [5, 2, 1, "", "get_paragraphs"], [5, 2, 1, "", "get_sentences"], [5, 4, 1, "id31", "get_text"], [5, 2, 1, "", "intent_recognition"], [5, 2, 1, "", "lemmatize"], [5, 2, 1, "", "load_model"], [5, 2, 1, "", "load_patterns"], [5, 2, 1, "id32", "load_text"], [5, 2, 1, "", "ngrams"], [5, 2, 1, "", "normalize_text"], [5, 2, 1, "", "parse_sentence"], [5, 2, 1, "", "plot_word_frequencies"], [5, 2, 1, "", "predict_text_category"], [5, 2, 1, "id33", "prepareTextInput"], [5, 2, 1, "id34", "query"], [5, 2, 1, "", "recognize"], [5, 2, 1, "", "remove_stopwords"], [5, 2, 1, "", "save_entity"], [5, 2, 1, "", "save_intent"], [5, 2, 1, "", "save_model"], [5, 2, 1, "", "sentence_to_tokens"], [5, 2, 1, "", "sentences_to_text"], [5, 4, 1, "id35", "set_text"], [5, 2, 1, "", "simple_pos_tagging"], [5, 2, 1, "", "summarize"], [5, 2, 1, "", "text_to_paragraphs"], [5, 2, 1, "", "text_to_sentences"], [5, 2, 1, "", "tokenize"], [5, 4, 1, "", "training_data_size"], [5, 2, 1, "id36", "unique_words_size"], [5, 2, 1, "", "update_model"], [5, 2, 1, "", "vectorize"], [5, 4, 1, "", "vocabulary_size"], [5, 2, 1, "id37", "word_frequencies"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"]}, "titleterms": {"ideal": [0, 2, 5, 14, 15, 32], "flow": [0, 2, 5, 13, 14, 15, 32], "network": [0, 2, 5, 11, 14, 15, 21, 22, 29, 32], "ifn": [0, 1, 2, 3, 4, 15, 29, 32, 33, 34], "beginn": 0, "": [0, 15], "guid": 0, "how": [0, 2, 32], "To": 0, "instal": [0, 32], "basic": 0, "us": [0, 2, 32], "data": [0, 1, 9, 10, 11, 34], "structur": [0, 11], "expand": 0, "indic": [0, 15, 21, 29], "test": [0, 29, 32, 35], "scienc": [1, 10], "machin": [1, 10], "learn": [1, 2, 10, 34], "artifici": [1, 10], "intellig": [1, 10], "appli": 2, "your": 2, "field": 2, "studi": 2, "across": 2, "variou": 2, "kei": 2, "concept": 2, "understand": 2, "decis": 2, "make": 2, "natur": [2, 33], "languag": [2, 33], "process": [2, 33], "nlp": 2, "imag": 2, "color": 2, "harmoni": 2, "comput": 2, "vision": 2, "time": 2, "seri": 2, "analysi": [2, 8, 17, 25, 28, 31], "music": 2, "medicin": 2, "transport": [2, 31, 34], "summari": 2, "tabl": [2, 5, 15, 34], "why": 2, "i": 2, "power": 2, "can": 2, "Be": 2, "solv": 2, "problem": 2, "conclus": 2, "classif": 34, "object": [], "recognit": [], "supervis": 34, "prepar": 34, "predict": 34, "random": [27, 34], "gener": [32, 34], "text": 5, "token": [], "spiritu": 3, "system": 3, "think": 3, "moral": 3, "The": 3, "our": 3, "belief": 3, "valu": 3, "principl": 3, "abstract": 3, "life": 3, "lesson": 3, "from": [3, 4], "integr": 3, "honesti": 3, "karma": 3, "feedback": 3, "logic": 3, "through": 3, "tutori": [4, 6, 32, 33], "link": [4, 16], "matrix": [4, 11, 18, 29], "trajectori": [4, 25], "cycl": [4, 8, 27], "equival": 4, "packag": 5, "submodul": 5, "idealflow": [5, 19], "modul": 5, "classifi": 5, "tableprocess": [], "textprocess": [], "control": [], "content": [5, 15], "markov": [6, 17], "order": 6, "adjac": 7, "list": 7, "oper": [7, 18, 22], "manag": [9, 13, 16, 23], "method": [9, 26, 29, 36], "1": 11, "direct": 11, "graph": 11, "2": 11, "name": 11, "convent": 11, "code": 11, "standard": 11, "entropi": 12, "welcom": 15, "document": 15, "chain": 17, "neighborhood": 20, "node": 23, "overview": 24, "main": 24, "class": 24, "exampl": [5, 24, 32], "usag": 24, "categori": 24, "applic": 24, "layer": 24, "path": [25, 32], "queri": 26, "search": 26, "walk": 27, "signatur": 28, "static": 29, "metod": 29, "convers": 29, "stochast": 30, "probabl": 30, "notat": 32, "terminologi": 32, "find": 32, "all": 32, "possibl": 32, "shortest": 32, "set": 32, "properti": 32, "more": 32, "unit": 35, "util": 36, "helper": 36, "commandlin": 5, "paramet": 5, "return": 5, "rais": 5, "mode": 34, "choic": 34}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 58}, "alltitles": {"Ideal Flow Network (IFN) - Beginner\u2019s Guide": [[0, "Ideal-Flow-Network-(IFN)---Beginner's-Guide"]], "How To Install:": [[0, "How-To-Install:"]], "Basic Use of IFN": [[0, "Basic-Use-of-IFN"]], "Basic Data Structure of IFN": [[0, "Basic-Data-Structure-of-IFN"]], "Expandable Network": [[0, "Expandable-Network"]], "Indicators": [[0, "Indicators"]], "Testing": [[0, "Testing"]], "Ideal Flow Network": [[0, "Ideal-Flow-Network"], [5, "ideal-flow-network"], [14, "ideal-flow-network"], [32, "Ideal-Flow-Network"]], "IFN for Data Science, Machine Learning and Artificial Intelligence": [[1, "IFN-for-Data-Science,-Machine-Learning-and-Artificial-Intelligence"]], "How to Apply IFN in Your Field of Study?": [[2, "How-to-Apply-IFN-in-Your-Field-of-Study?"]], "Applying Ideal Flow Networks (IFN) Across Various Fields": [[2, "Applying-Ideal-Flow-Networks-(IFN)-Across-Various-Fields"]], "How IFN Learns": [[2, "How-IFN-Learns"]], "Key Concepts Across Fields": [[2, "Key-Concepts-Across-Fields"]], "Understanding IFN in Decision-Making": [[2, "Understanding-IFN-in-Decision-Making"]], "IFN in Natural Language Processing (NLP)": [[2, "IFN-in-Natural-Language-Processing-(NLP)"]], "IFN in Image Processing and Color Harmony": [[2, "IFN-in-Image-Processing-and-Color-Harmony"]], "IFN in Computer Vision": [[2, "IFN-in-Computer-Vision"]], "IFN in Time Series Analysis": [[2, "IFN-in-Time-Series-Analysis"]], "IFN in Music Harmony": [[2, "IFN-in-Music-Harmony"]], "IFN in Medicine": [[2, "IFN-in-Medicine"]], "IFN in Transportation": [[2, "IFN-in-Transportation"]], "Summary Table": [[2, "Summary-Table"]], "Why IFN is Powerful and Can Be Used to Solve Problems": [[2, "Why-IFN-is-Powerful-and-Can-Be-Used-to-Solve-Problems"]], "Conclusion": [[2, "Conclusion"]], "IFN Spirituality, System Thinking and Morality": [[3, "IFN-Spirituality,-System-Thinking-and-Morality"]], "The Spirituality of IFN": [[3, "The-Spirituality-of-IFN"]], "Our Belief": [[3, "Our-Belief"]], "Values and Principles of IFN:": [[3, "Values-and-Principles-of-IFN:"]], "Abstractions and Life Lessons from IFN:": [[3, "Abstractions-and-Life-Lessons-from-IFN:"]], "Integrity and Honesty in IFN": [[3, "Integrity-and-Honesty-in-IFN"]], "System Thinking and Karma": [[3, "System-Thinking-and-Karma"]], "The Value of Feedback Systems": [[3, "The-Value-of-Feedback-Systems"]], "Morality and Logic through IFN": [[3, "Morality-and-Logic-through-IFN"]], "IFN Tutorial": [[4, "IFN-Tutorial"]], "IFN from Links": [[4, "IFN-from-Links"]], "IFN from Matrix": [[4, "IFN-from-Matrix"]], "IFN from Trajectories": [[4, "IFN-from-Trajectories"]], "IFN from Cycles": [[4, "IFN-from-Cycles"]], "Equivalent IFN": [[4, "Equivalent-IFN"], [4, "id1"]], "Ideal Flow Package": [[5, "ideal-flow-package"]], "Module contents": [[5, "module-IdealFlow"]], "Submodules": [[5, "submodules"]], "IdealFlow.CommandLine module": [[5, "module-IdealFlow.CommandLine"]], "IdealFlow.Network module": [[5, "module-IdealFlow.Network"]], "IdealFlow.Classifier module": [[5, "module-IdealFlow.Classifier"]], "Parameters:": [[5, "parameters"], [5, "id1"], [5, "id5"], [5, "id8"], [5, "id14"], [5, "id17"], [5, "id19"], [5, "id22"], [5, "id25"]], "Returns:": [[5, "returns"], [5, "id2"], [5, "id6"], [5, "id9"], [5, "id15"], [5, "id20"], [5, "id23"], [5, "id26"]], "Example:": [[5, "example"], [5, "id3"], [5, "id4"], [5, "id7"], [5, "id10"], [5, "id12"], [5, "id13"], [5, "id16"], [5, "id18"], [5, "id21"], [5, "id24"], [5, "id27"]], "Raises:": [[5, "raises"], [5, "id11"]], "IdealFlow.Table module": [[5, "module-IdealFlow.Table"]], "IdealFlow.Text module": [[5, "module-IdealFlow.Text"]], "Tutorial on Markov Order": [[6, "Tutorial-on-Markov-Order"]], "Adjacency List Operations": [[7, "adjacency-list-operations"]], "Cycle Analysis": [[8, "cycle-analysis"]], "Data Management Methods": [[9, "data-management-methods"]], "Data Science, Machine Learning and Artificial Intelligence": [[10, "data-science-machine-learning-and-artificial-intelligence"]], "Data Structure": [[11, "data-structure"]], "1.      Network Directed Graph": [[11, "network-directed-graph"]], "2.      Matrix": [[11, "matrix"]], "Naming Convention": [[11, "naming-convention"]], "Coding Standard": [[11, "coding-standard"]], "Entropy": [[12, "entropy"]], "Flow Management": [[13, "flow-management"]], "Welcome to Ideal Flow Network (IFN)\u2019s documentation!": [[15, "welcome-to-ideal-flow-network-ifn-s-documentation"]], "Contents:": [[15, null]], "Indices and tables": [[15, "indices-and-tables"]], "Link Management": [[16, "link-management"]], "Markov Chain Analysis": [[17, "markov-chain-analysis"]], "Matrix Operations": [[18, "matrix-operations"]], "IdealFlow": [[19, "idealflow"]], "Neighborhood": [[20, "neighborhood"]], "Network Indices": [[21, "network-indices"]], "Network Operations": [[22, "network-operations"]], "Node Management": [[23, "node-management"]], "Overview": [[24, "overview"]], "Main Classes": [[24, "main-classes"]], "Example Usage": [[24, "example-usage"]], "Categories": [[24, "categories"]], "Applications Layer": [[24, "applications-layer"]], "Path and Trajectory Analysis": [[25, "path-and-trajectory-analysis"]], "Query and Search Methods": [[26, "query-and-search-methods"]], "Random Walk and Random Cycle": [[27, "random-walk-and-random-cycle"]], "Signature Analysis": [[28, "signature-analysis"]], "Methods in IFN": [[29, "Methods-in-IFN"]], "Static Methods": [[29, "Static-Methods"]], "Static Metods for Network Indicators": [[29, "Static-Metods-for-Network-Indicators"]], "Static Methods for Network Testings": [[29, "Static-Methods-for-Network-Testings"]], "Static Methods for Matrix Conversions": [[29, "Static-Methods-for-Matrix-Conversions"]], "Stochastic and Probability": [[30, "stochastic-and-probability"]], "Transportation Analysis": [[31, "transportation-analysis"]], "IFN Tutorial for General Network": [[32, "IFN-Tutorial-for-General-Network"]], "How to Install": [[32, "How-to-Install"]], "Using Ideal Flow Network": [[32, "Using-Ideal-Flow-Network"]], "Notations": [[32, "Notations"]], "Terminologies:": [[32, "Terminologies:"]], "General Network": [[32, "General-Network"]], "Path": [[32, "Path"]], "Find Path": [[32, "Find-Path"]], "Find All Possible Paths": [[32, "Find-All-Possible-Paths"]], "Shortest Path": [[32, "Shortest-Path"]], "All Shortest Path": [[32, "All-Shortest-Path"]], "Testing Path": [[32, "Testing-Path"]], "Set Path": [[32, "Set-Path"]], "Network Properties": [[32, "Network-Properties"]], "More Examples": [[32, "More-Examples"]], "IFN Tutorial for Natural Language Processing": [[33, "IFN-Tutorial-for-Natural-Language-Processing"]], "IFN for Classification of Data Table (Supervised Learning)": [[34, "IFN-for-Classification-of-Data-Table-(Supervised-Learning)"]], "Data Preparation": [[34, "Data-Preparation"]], "Transportation Mode Choice": [[34, "Transportation-Mode-Choice"]], "Prediction": [[34, "Prediction"]], "Random Generation of Data": [[34, "Random-Generation-of-Data"]], "Unit Tests": [[35, "unit-tests"]], "Utilities and Helper Methods": [[36, "utilities-and-helper-methods"]]}, "indexentries": {"classifier (class in idealflow.classifier)": [[5, "IdealFlow.Classifier.Classifier"]], "commandline (class in idealflow.commandline)": [[5, "IdealFlow.CommandLine.CommandLine"]], "ifn (class in idealflow.network)": [[5, "IdealFlow.Network.IFN"]], "idealflow": [[5, "module-IdealFlow"]], "idealflow.classifier": [[5, "module-IdealFlow.Classifier"]], "idealflow.commandline": [[5, "module-IdealFlow.CommandLine"]], "idealflow.network": [[5, "module-IdealFlow.Network"]], "idealflow.table": [[5, "module-IdealFlow.Table"]], "idealflow.text": [[5, "module-IdealFlow.Text"]], "nlp (class in idealflow.text)": [[5, "IdealFlow.Text.NLP"]], "table_classifier (class in idealflow.table)": [[5, "IdealFlow.Table.Table_Classifier"]], "__convert__table_to_code__() (idealflow.table.table_classifier method)": [[5, "IdealFlow.Table.Table_Classifier.__convert__table_to_code__"]], "__delete_a_column__() (idealflow.table.table_classifier method)": [[5, "IdealFlow.Table.Table_Classifier.__delete_a_column__"]], "__delete_a_row__() (idealflow.table.table_classifier method)": [[5, "IdealFlow.Table.Table_Classifier.__delete_a_row__"]], "__str_help__() (idealflow.commandline.commandline method)": [[5, "IdealFlow.CommandLine.CommandLine.__str_help__"]], "__takearow__() (idealflow.table.table_classifier method)": [[5, "IdealFlow.Table.Table_Classifier.__takeARow__"]], "__take_a_column__() (idealflow.table.table_classifier method)": [[5, "IdealFlow.Table.Table_Classifier.__take_a_column__"]], "abs_diff_capacity_flow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.abs_diff_capacity_flow"]], "add_entity_pattern() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.add_entity_pattern"]], "add_first_link() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.add_first_link"]], "add_intent() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.add_intent"]], "add_last_link() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.add_last_link"]], "add_link() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.add_link"]], "add_node() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.add_node"]], "add_random_ones() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.add_random_ones"]], "adj_list_to_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.adj_list_to_matrix"]], "adjacency_to_ideal_flow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.adjacency_to_ideal_flow"]], "adjacency_to_stochastic() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.adjacency_to_stochastic"]], "all_shortest_path() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.all_shortest_path"]], "alphabet_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.alphabet_list"]], "assign() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.assign"]], "assign_adjacency_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.assign_adjacency_list"]], "assign_cycle_to_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.assign_cycle_to_matrix"]], "association_predict_actor_net() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.association_predict_actor_net"]], "association_predict_trajectory() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.association_predict_trajectory"]], "association_train() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.association_train"]], "average_flow (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.average_flow"]], "average_flow_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.average_flow_matrix"]], "average_node_entropy (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.average_node_entropy"]], "average_node_entropy_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.average_node_entropy_matrix"]], "average_node_entropy_ratio (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.average_node_entropy_ratio"]], "average_node_entropy_ratio_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.average_node_entropy_ratio_matrix"]], "average_sentence_length() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.average_sentence_length"], [5, "id29"]], "average_word_length() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.average_word_length"], [5, "id30"]], "backtracking() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.backtracking"]], "backtracking_cycle_limit() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.backtracking_cycle_limit"]], "bag_of_words() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.bag_of_words"]], "bfs() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.bfs"]], "bfs_until() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.bfs_until"]], "binarized_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.binarized_matrix"]], "build_dependency_tree() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.build_dependency_tree"]], "canonize() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.canonize"]], "canonize_cycle_dict() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.canonize_cycle_dict"]], "canonize_signature() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.canonize_signature"]], "capacity_to_adjacency() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.capacity_to_adjacency"]], "capacity_to_balance_inflow_outflow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.capacity_to_balance_inflow_outflow"]], "capacity_to_congestion() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.capacity_to_congestion"]], "capacity_to_ideal_flow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.capacity_to_ideal_flow"]], "capacity_to_stochastic() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.capacity_to_stochastic"]], "cardinal_ifn_signature() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.cardinal_ifn_signature"]], "change_flow_in_cycle() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.change_flow_in_cycle"]], "color_graph() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.color_graph"]], "combinations() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.combinations"]], "complement() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.complement"]], "complete_graph() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.complete_graph"]], "compose() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.compose"]], "congestion() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.congestion"]], "controller() (idealflow.commandline.commandline method)": [[5, "IdealFlow.CommandLine.CommandLine.controller"], [5, "id0"]], "copy_dict() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.copy_dict"]], "cov_flow (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.cov_flow"]], "cov_flow_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.cov_flow_matrix"]], "create_node_mapping() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.create_node_mapping"]], "cycle_dict_to_signature() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.cycle_dict_to_signature"]], "cycle_length() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.cycle_length"]], "cycle_sum_weight() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.cycle_sum_weight"]], "decimal_to_fraction() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.decimal_to_fraction"]], "decompose() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.decompose"]], "delete_link() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.delete_link"]], "delete_node() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.delete_node"]], "density (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.density"]], "detokenize() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.detokenize"]], "dfs() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.dfs"]], "dfs_adj_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.dfs_adj_list"]], "dfs_until() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.dfs_until"]], "diameter (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.diameter"]], "difference() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.difference"]], "duplicate() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.duplicate"]], "entity_recognition() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.entity_recognition"]], "equivalent_ifn() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.equivalent_ifn"]], "evaluate() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.evaluate"]], "excel_col_to_num() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.excel_col_to_num"]], "extract_first_k_terms() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.extract_first_k_terms"]], "extract_last_k_terms() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.extract_last_k_terms"]], "find_a_cycle() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_a_cycle"]], "find_all_cycles_in_adj_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_all_cycles_in_adj_list"]], "find_all_cycles_in_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_all_cycles_in_matrix"]], "find_all_paths() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.find_all_paths"]], "find_all_permutation_cycles() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_all_permutation_cycles"]], "find_all_walks_in_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_all_walks_in_matrix"]], "find_cardinal_ifn_signature_exhaustive() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_cardinal_ifn_signature_exhaustive"]], "find_cycles() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_cycles"]], "find_element_in_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_element_in_list"]], "find_key_in_dict() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_key_in_dict"]], "find_path() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.find_path"]], "find_path_cycle_limit() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.find_path_cycle_limit"]], "find_pivot_type() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_pivot_type"]], "find_pivots() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.find_pivots"]], "fit() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.fit"]], "flow_matrix_to_adj_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.flow_matrix_to_adj_list"]], "flows_in_cycle() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.flows_in_cycle"]], "form_link_cycle_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.form_link_cycle_matrix"]], "from_base62() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.from_base62"]], "generate() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.generate"]], "generate() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.generate"]], "generate_combinations() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.generate_combinations"]], "generate_random_terms() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.generate_random_terms"]], "get_data() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.get_data"]], "get_link_flow() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.get_link_flow"]], "get_links (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.get_links"]], "get_matrix() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.get_matrix"]], "get_paragraphs() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.get_paragraphs"]], "get_path() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.get_path"]], "get_path_entropy() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.get_path_entropy"]], "get_path_probability() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.get_path_probability"]], "get_sentences() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.get_sentences"]], "get_text (idealflow.text.nlp property)": [[5, "id31"]], "get_text() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.get_text"]], "global_scaling() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.global_scaling"]], "hadamard_division() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.hadamard_division"]], "has_pivot() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.has_pivot"]], "ideal_flow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.ideal_flow"]], "ideal_flow_to_stochastic() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.ideal_flow_to_stochastic"]], "identify_unique_nodes() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.identify_unique_nodes"]], "ifnc (idealflow.commandline.commandline attribute)": [[5, "IdealFlow.CommandLine.CommandLine.ifnc"]], "in_degree (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.in_degree"]], "in_neighbors() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.in_neighbors"]], "in_weight (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.in_weight"]], "intent_recognition() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.intent_recognition"]], "intersect() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.intersect"]], "inverse_dict() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.inverse_dict"]], "is_acyclic (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.is_acyclic"]], "is_bipartite (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.is_bipartite"]], "is_connected (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.is_connected"]], "is_contain_cycle (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.is_contain_cycle"]], "is_cycle_canonical() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_cycle_canonical"]], "is_cycle_has_coef_1() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_cycle_has_coef_1"]], "is_edge_in_cycle() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_edge_in_cycle"]], "is_equal_network() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_equal_network"]], "is_equal_signature() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_equal_signature"]], "is_equivalent_ifn() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.is_equivalent_ifn"]], "is_eulerian_cycle (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.is_eulerian_cycle"]], "is_ideal_flow (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.is_ideal_flow"]], "is_ideal_flow_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_ideal_flow_matrix"]], "is_irreducible_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_irreducible_matrix"]], "is_irreducible_signature() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_irreducible_signature"]], "is_non_empty_adj_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_non_empty_adj_list"]], "is_non_negative_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_non_negative_matrix"]], "is_path() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.is_path"]], "is_positive_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_positive_matrix"]], "is_premagic (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.is_premagic"]], "is_premagic_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_premagic_matrix"]], "is_premier_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_premier_matrix"]], "is_premier_signature() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_premier_signature"]], "is_reachable() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.is_reachable"]], "is_row_stochastic_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_row_stochastic_matrix"]], "is_square_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_square_matrix"]], "is_strongly_connected (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.is_strongly_connected"]], "is_trajectory_cycle() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.is_trajectory_cycle"]], "is_valid_signature() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.is_valid_signature"]], "kappa() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.kappa"]], "lemmatize() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.lemmatize"]], "link_combination() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.link_combination"]], "link_cycle_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.link_cycle_matrix"]], "link_permutation() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.link_permutation"]], "load() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.load"]], "load() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.load"]], "load_adj_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.load_adj_list"]], "load_model() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.load_model"]], "load_patterns() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.load_patterns"]], "load_text() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.load_text"], [5, "id32"]], "markov() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.markov"]], "markovorder (idealflow.table.table_classifier attribute)": [[5, "IdealFlow.Table.Table_Classifier.markovOrder"]], "match() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.match"]], "matrix_apply_cycle() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.matrix_apply_cycle"]], "matrix_replace_value() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.matrix_replace_value"]], "matrix_to_adj_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.matrix_to_adj_list"]], "max_flow (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.max_flow"]], "max_flow_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.max_flow_matrix"]], "max_flow_path() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.max_flow_path"]], "max_network_entropy() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.max_network_entropy"]], "merge_adjacency_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.merge_adjacency_list"]], "merge_signatures() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.merge_signatures"]], "min_flow (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.min_flow"]], "min_flow_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.min_flow_matrix"]], "min_flow_path() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.min_flow_path"]], "min_irreducible() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.min_irreducible"]], "module": [[5, "module-IdealFlow"], [5, "module-IdealFlow.Classifier"], [5, "module-IdealFlow.CommandLine"], [5, "module-IdealFlow.Network"], [5, "module-IdealFlow.Table"], [5, "module-IdealFlow.Text"]], "network_delete_cloud() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.network_delete_cloud"]], "network_entropy (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.network_entropy"]], "network_entropy_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.network_entropy_matrix"]], "network_entropy_ratio (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.network_entropy_ratio"]], "network_entropy_ratio_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.network_entropy_ratio_matrix"]], "network_probability (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.network_probability"]], "ngrams() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.ngrams"]], "node_index() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.node_index"]], "node_name() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.node_name"]], "nodes (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.nodes"]], "nodes_flow (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.nodes_flow"]], "normalize_text() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.normalize_text"]], "num_to_excel_col() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.num_to_excel_col"]], "num_to_str_fraction() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.num_to_str_fraction"]], "order_markov_higher() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.order_markov_higher"]], "order_markov_lower() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.order_markov_lower"]], "out_degree (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.out_degree"]], "out_neighbors() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.out_neighbors"]], "out_weight (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.out_weight"]], "overlay() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.overlay"]], "parse_cycle() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.parse_cycle"]], "parse_sentence() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.parse_sentence"]], "parse_terms_to_dict() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.parse_terms_to_dict"]], "path_distance() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.path_distance"]], "path_length() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.path_length"]], "path_sum_weight() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.path_sum_weight"]], "permutations() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.permutations"]], "plot_word_frequencies() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.plot_word_frequencies"]], "predict() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.predict"]], "predict_table() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.predict_table"]], "predict_text_category() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.predict_text_category"]], "premier_ifn() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.premier_ifn"]], "premier_signature() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.premier_signature"]], "preparetextinput() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.prepareTextInput"], [5, "id33"]], "prepare_data_table() (idealflow.table.table_classifier method)": [[5, "IdealFlow.Table.Table_Classifier.prepare_data_table"], [5, "id28"]], "query() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.query"]], "query() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.query"], [5, "id34"]], "query_cycle_limit() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.query_cycle_limit"]], "rand_capacity() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.rand_capacity"]], "rand_ifn_signature() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.rand_ifn_signature"]], "rand_int() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.rand_int"]], "rand_irreducible() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.rand_irreducible"]], "rand_permutation_eye() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.rand_permutation_eye"]], "rand_stochastic() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.rand_stochastic"]], "random_cycle_from() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.random_cycle_from"]], "random_ideal_flow_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.random_ideal_flow_matrix"]], "random_ifn() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.random_ifn"]], "random_irreducible_stochastic() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.random_irreducible_stochastic"]], "random_walk_cycle() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.random_walk_cycle"]], "random_walk_from() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.random_walk_from"]], "random_walk_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.random_walk_matrix"]], "random_walk_nodes() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.random_walk_nodes"]], "read_csv() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.read_csv"]], "recognize() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.recognize"]], "reduce_link_flow() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.reduce_link_flow"]], "reindex() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.reindex"]], "relabel_signature() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.relabel_signature"]], "remove_stopwords() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.remove_stopwords"]], "reverse_network() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.reverse_network"]], "reverse_relabel_signature() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.reverse_relabel_signature"]], "row_stochastic (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.row_stochastic"]], "save() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.save"]], "save() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.save"]], "save_adj_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.save_adj_list"]], "save_entity() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.save_entity"]], "save_intent() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.save_intent"]], "save_model() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.save_model"]], "sentence_to_tokens() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.sentence_to_tokens"]], "sentences_to_text() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.sentences_to_text"]], "set_data() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.set_data"]], "set_link_weight() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.set_link_weight"]], "set_link_weight_plus_1() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.set_link_weight_plus_1"]], "set_matrix() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.set_matrix"]], "set_path() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.set_path"]], "set_text (idealflow.text.nlp property)": [[5, "id35"]], "set_text() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.set_text"]], "shortest_path() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.shortest_path"]], "show() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.show"]], "show() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.show"]], "signature_coef_to_1() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_coef_to_1"]], "signature_to_adj_list() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_adj_list"]], "signature_to_coef_flow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_coef_flow"]], "signature_to_column_stochastic() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_column_stochastic"]], "signature_to_ideal_flow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_ideal_flow"]], "signature_to_kappa() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_kappa"]], "signature_to_link_flow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_link_flow"]], "signature_to_links() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_links"]], "signature_to_max_flow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_max_flow"]], "signature_to_min_flow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_min_flow"]], "signature_to_num_links() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_num_links"]], "signature_to_num_nodes() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_num_nodes"]], "signature_to_pivots() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_pivots"]], "signature_to_row_stochastic() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_row_stochastic"]], "signature_to_sum_cols() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_sum_cols"]], "signature_to_sum_rows() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.signature_to_sum_rows"]], "simple_pos_tagging() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.simple_pos_tagging"]], "solve_cycles() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.solve_cycles"]], "stationary_markov_chain() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.stationary_markov_chain"]], "stdev_flow (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.stdev_flow"]], "stdev_flow_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.stdev_flow_matrix"]], "stochastic_to_entropy_ratio() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.stochastic_to_entropy_ratio"]], "stochastic_to_ideal_flow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.stochastic_to_ideal_flow"]], "stochastic_to_network_entropy() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.stochastic_to_network_entropy"]], "stochastic_to_pi() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.stochastic_to_pi"]], "stochastic_to_probability() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.stochastic_to_probability"]], "str_to_num() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.str_to_num"]], "string_to_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.string_to_matrix"]], "sum_dict_values() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.sum_dict_values"]], "sum_of_col() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.sum_of_col"]], "sum_of_row() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.sum_of_row"]], "summarize() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.summarize"]], "text_to_paragraphs() (idealflow.text.nlp static method)": [[5, "IdealFlow.Text.NLP.text_to_paragraphs"]], "text_to_sentences() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.text_to_sentences"]], "to_adjacency_matrix() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.to_adjacency_matrix"]], "to_base62() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.to_base62"]], "to_equal_inflow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.to_equal_inflow"]], "to_equal_outflow() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.to_equal_outflow"]], "to_graph() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.to_graph"]], "to_markov_order() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.to_markov_order"]], "tokenize() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.tokenize"]], "top_nodes() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.top_nodes"]], "total_flow (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.total_flow"]], "total_links (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.total_links"]], "total_nodes (idealflow.network.ifn property)": [[5, "IdealFlow.Network.IFN.total_nodes"]], "train() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.train"]], "training_data_size (idealflow.text.nlp property)": [[5, "IdealFlow.Text.NLP.training_data_size"]], "trajcode2varval() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.trajCode2VarVal"]], "trajvarval2code() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.trajVarVal2Code"]], "trajectory_to_links() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.trajectory_to_links"]], "union() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.union"]], "unique_words_size() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.unique_words_size"], [5, "id36"]], "universe() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.universe"]], "unlearn() (idealflow.network.ifn method)": [[5, "IdealFlow.Network.IFN.unlearn"]], "update_lut() (idealflow.classifier.classifier method)": [[5, "IdealFlow.Classifier.Classifier.update_lut"]], "update_model() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.update_model"]], "variables (idealflow.table.table_classifier attribute)": [[5, "IdealFlow.Table.Table_Classifier.variables"]], "vectorize() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.vectorize"]], "version (idealflow.table.table_classifier attribute)": [[5, "IdealFlow.Table.Table_Classifier.version"]], "vocabulary_size (idealflow.text.nlp property)": [[5, "IdealFlow.Text.NLP.vocabulary_size"]], "weighted_random_choice() (idealflow.network.ifn static method)": [[5, "IdealFlow.Network.IFN.weighted_random_choice"]], "word_frequencies() (idealflow.text.nlp method)": [[5, "IdealFlow.Text.NLP.word_frequencies"], [5, "id37"]]}})